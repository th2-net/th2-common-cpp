// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyMessage_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Checkpoint_DirectionCheckpoint_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComparisonSettings_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Event_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListValue_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListValueFilter_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageGroup_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageID_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageMetadata_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawMessage_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RawMessageMetadata_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class ConnectionIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectionID> _instance;
} _ConnectionID_default_instance_;
class MessageIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageID> _instance;
} _MessageID_default_instance_;
class MessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMetadata_PropertiesEntry_DoNotUse> _instance;
} _MessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
class MessageMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMetadata> _instance;
} _MessageMetadata_default_instance_;
class RawMessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawMessageMetadata_PropertiesEntry_DoNotUse> _instance;
} _RawMessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
class RawMessageMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawMessageMetadata> _instance;
} _RawMessageMetadata_default_instance_;
class ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Value> _instance;
  int null_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simple_value_;
  const ::Message* message_value_;
  const ::ListValue* list_value_;
} _Value_default_instance_;
class ListValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValue> _instance;
} _ListValue_default_instance_;
class Message_FieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_FieldsEntry_DoNotUse> _instance;
} _Message_FieldsEntry_DoNotUse_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class RawMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawMessage> _instance;
} _RawMessage_default_instance_;
class AnyMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnyMessage> _instance;
  const ::Message* message_;
  const ::RawMessage* raw_message_;
} _AnyMessage_default_instance_;
class MessageGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageGroup> _instance;
} _MessageGroup_default_instance_;
class MessageBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBatch> _instance;
} _MessageBatch_default_instance_;
class RawMessageBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawMessageBatch> _instance;
} _RawMessageBatch_default_instance_;
class MessageGroupBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageGroupBatch> _instance;
} _MessageGroupBatch_default_instance_;
class RequestStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestStatus> _instance;
} _RequestStatus_default_instance_;
class ComparisonSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ComparisonSettings> _instance;
} _ComparisonSettings_default_instance_;
class ValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueFilter> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simple_filter_;
  const ::MessageFilter* message_filter_;
  const ::ListValueFilter* list_filter_;
} _ValueFilter_default_instance_;
class ListValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListValueFilter> _instance;
} _ListValueFilter_default_instance_;
class MessageFilter_FieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFilter_FieldsEntry_DoNotUse> _instance;
} _MessageFilter_FieldsEntry_DoNotUse_default_instance_;
class MessageFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFilter> _instance;
} _MessageFilter_default_instance_;
class Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse> _instance;
} _Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_default_instance_;
class Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse> _instance;
} _Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_default_instance_;
class Checkpoint_DirectionCheckpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Checkpoint_DirectionCheckpoint> _instance;
} _Checkpoint_DirectionCheckpoint_default_instance_;
class CheckpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Checkpoint> _instance;
} _Checkpoint_default_instance_;
class EventIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventID> _instance;
} _EventID_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class EventBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventBatch> _instance;
} _EventBatch_default_instance_;
static void InitDefaultsscc_info_AnyMessage_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AnyMessage_default_instance_;
    new (ptr) ::AnyMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AnyMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnyMessage_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AnyMessage_common_2eproto}, {
      &scc_info_ListValue_common_2eproto.base,
      &scc_info_RawMessage_common_2eproto.base,}};

static void InitDefaultsscc_info_Checkpoint_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Checkpoint_default_instance_;
    new (ptr) ::Checkpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Checkpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Checkpoint_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Checkpoint_common_2eproto}, {
      &scc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_Checkpoint_DirectionCheckpoint_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Checkpoint_DirectionCheckpoint_default_instance_;
    new (ptr) ::Checkpoint_DirectionCheckpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Checkpoint_DirectionCheckpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Checkpoint_DirectionCheckpoint_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Checkpoint_DirectionCheckpoint_common_2eproto}, {
      &scc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_default_instance_;
    new (ptr) ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse();
  }
  ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_default_instance_;
    new (ptr) ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse();
  }
  ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto}, {
      &scc_info_Checkpoint_DirectionCheckpoint_common_2eproto.base,}};

static void InitDefaultsscc_info_ComparisonSettings_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ComparisonSettings_default_instance_;
    new (ptr) ::ComparisonSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ComparisonSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ComparisonSettings_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ComparisonSettings_common_2eproto}, {}};

static void InitDefaultsscc_info_ConnectionID_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConnectionID_default_instance_;
    new (ptr) ::ConnectionID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConnectionID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectionID_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectionID_common_2eproto}, {}};

static void InitDefaultsscc_info_Event_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Event_default_instance_;
    new (ptr) ::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Event_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Event_common_2eproto}, {
      &scc_info_EventID_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_MessageID_common_2eproto.base,}};

static void InitDefaultsscc_info_EventBatch_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EventBatch_default_instance_;
    new (ptr) ::EventBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EventBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_EventBatch_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_EventBatch_common_2eproto}, {
      &scc_info_EventID_common_2eproto.base,
      &scc_info_Event_common_2eproto.base,}};

static void InitDefaultsscc_info_EventID_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EventID_default_instance_;
    new (ptr) ::EventID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EventID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventID_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventID_common_2eproto}, {}};

static void InitDefaultsscc_info_ListValue_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Value_default_instance_;
    new (ptr) ::Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_ListValue_default_instance_;
    new (ptr) ::ListValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_Message_FieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::Message_FieldsEntry_DoNotUse();
  }
  {
    void* ptr = &::_Message_default_instance_;
    new (ptr) ::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Value::InitAsDefaultInstance();
  ::ListValue::InitAsDefaultInstance();
  ::Message_FieldsEntry_DoNotUse::InitAsDefaultInstance();
  ::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListValue_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListValue_common_2eproto}, {
      &scc_info_EventID_common_2eproto.base,
      &scc_info_MessageMetadata_common_2eproto.base,}};

static void InitDefaultsscc_info_ListValueFilter_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ValueFilter_default_instance_;
    new (ptr) ::ValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_ListValueFilter_default_instance_;
    new (ptr) ::ListValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::_MessageFilter_FieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::MessageFilter_FieldsEntry_DoNotUse();
  }
  {
    void* ptr = &::_MessageFilter_default_instance_;
    new (ptr) ::MessageFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ValueFilter::InitAsDefaultInstance();
  ::ListValueFilter::InitAsDefaultInstance();
  ::MessageFilter_FieldsEntry_DoNotUse::InitAsDefaultInstance();
  ::MessageFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListValueFilter_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListValueFilter_common_2eproto}, {
      &scc_info_ComparisonSettings_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageBatch_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageBatch_default_instance_;
    new (ptr) ::MessageBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageBatch_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageBatch_common_2eproto}, {
      &scc_info_ListValue_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageGroup_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageGroup_default_instance_;
    new (ptr) ::MessageGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageGroup_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageGroup_common_2eproto}, {
      &scc_info_AnyMessage_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageGroupBatch_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageGroupBatch_default_instance_;
    new (ptr) ::MessageGroupBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageGroupBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageGroupBatch_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageGroupBatch_common_2eproto}, {
      &scc_info_MessageGroup_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageID_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageID_default_instance_;
    new (ptr) ::MessageID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageID_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageID_common_2eproto}, {
      &scc_info_ConnectionID_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageMetadata_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageMetadata_default_instance_;
    new (ptr) ::MessageMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessageMetadata_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessageMetadata_common_2eproto}, {
      &scc_info_MessageID_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::MessageMetadata_PropertiesEntry_DoNotUse();
  }
  ::MessageMetadata_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_RawMessage_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RawMessage_default_instance_;
    new (ptr) ::RawMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RawMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawMessage_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawMessage_common_2eproto}, {
      &scc_info_RawMessageMetadata_common_2eproto.base,}};

static void InitDefaultsscc_info_RawMessageBatch_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RawMessageBatch_default_instance_;
    new (ptr) ::RawMessageBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RawMessageBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawMessageBatch_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawMessageBatch_common_2eproto}, {
      &scc_info_RawMessage_common_2eproto.base,}};

static void InitDefaultsscc_info_RawMessageMetadata_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RawMessageMetadata_default_instance_;
    new (ptr) ::RawMessageMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RawMessageMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RawMessageMetadata_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RawMessageMetadata_common_2eproto}, {
      &scc_info_MessageID_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto.base,}};

static void InitDefaultsscc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RawMessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::RawMessageMetadata_PropertiesEntry_DoNotUse();
  }
  ::RawMessageMetadata_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto}, {}};

static void InitDefaultsscc_info_RequestStatus_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestStatus_default_instance_;
    new (ptr) ::RequestStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestStatus_common_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestStatus_common_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_common_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_common_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConnectionID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConnectionID, session_alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageID, connection_id_),
  PROTOBUF_FIELD_OFFSET(::MessageID, direction_),
  PROTOBUF_FIELD_OFFSET(::MessageID, sequence_),
  PROTOBUF_FIELD_OFFSET(::MessageID, subsequence_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageMetadata_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, timestamp_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, message_type_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, properties_),
  PROTOBUF_FIELD_OFFSET(::MessageMetadata, protocol_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata, timestamp_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata, properties_),
  PROTOBUF_FIELD_OFFSET(::RawMessageMetadata, protocol_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ValueDefaultTypeInternal, null_value_),
  offsetof(::ValueDefaultTypeInternal, simple_value_),
  offsetof(::ValueDefaultTypeInternal, message_value_),
  offsetof(::ValueDefaultTypeInternal, list_value_),
  PROTOBUF_FIELD_OFFSET(::Value, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ListValue, values_),
  PROTOBUF_FIELD_OFFSET(::Message_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Message_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Message_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message, parent_event_id_),
  PROTOBUF_FIELD_OFFSET(::Message, metadata_),
  PROTOBUF_FIELD_OFFSET(::Message, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RawMessage, metadata_),
  PROTOBUF_FIELD_OFFSET(::RawMessage, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AnyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::AnyMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::AnyMessageDefaultTypeInternal, message_),
  offsetof(::AnyMessageDefaultTypeInternal, raw_message_),
  PROTOBUF_FIELD_OFFSET(::AnyMessage, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageGroup, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageBatch, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RawMessageBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RawMessageBatch, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageGroupBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageGroupBatch, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestStatus, status_),
  PROTOBUF_FIELD_OFFSET(::RequestStatus, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ComparisonSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ComparisonSettings, ignore_fields_),
  PROTOBUF_FIELD_OFFSET(::ComparisonSettings, fail_unexpected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ValueFilter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ValueFilter, operation_),
  PROTOBUF_FIELD_OFFSET(::ValueFilter, key_),
  offsetof(::ValueFilterDefaultTypeInternal, simple_filter_),
  offsetof(::ValueFilterDefaultTypeInternal, message_filter_),
  offsetof(::ValueFilterDefaultTypeInternal, list_filter_),
  PROTOBUF_FIELD_OFFSET(::ValueFilter, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ListValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ListValueFilter, values_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageFilter_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageFilter, messagetype_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter, direction_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter, fields_),
  PROTOBUF_FIELD_OFFSET(::MessageFilter, comparison_settings_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Checkpoint_DirectionCheckpoint, direction_to_sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Checkpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Checkpoint, id_),
  PROTOBUF_FIELD_OFFSET(::Checkpoint, session_alias_to_direction_checkpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EventID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Event, id_),
  PROTOBUF_FIELD_OFFSET(::Event, parent_id_),
  PROTOBUF_FIELD_OFFSET(::Event, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Event, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Event, status_),
  PROTOBUF_FIELD_OFFSET(::Event, name_),
  PROTOBUF_FIELD_OFFSET(::Event, type_),
  PROTOBUF_FIELD_OFFSET(::Event, body_),
  PROTOBUF_FIELD_OFFSET(::Event, attached_message_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EventBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EventBatch, parent_event_id_),
  PROTOBUF_FIELD_OFFSET(::EventBatch, events_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ConnectionID)},
  { 6, -1, sizeof(::MessageID)},
  { 15, 22, sizeof(::MessageMetadata_PropertiesEntry_DoNotUse)},
  { 24, -1, sizeof(::MessageMetadata)},
  { 34, 41, sizeof(::RawMessageMetadata_PropertiesEntry_DoNotUse)},
  { 43, -1, sizeof(::RawMessageMetadata)},
  { 52, -1, sizeof(::Value)},
  { 62, -1, sizeof(::ListValue)},
  { 68, 75, sizeof(::Message_FieldsEntry_DoNotUse)},
  { 77, -1, sizeof(::Message)},
  { 85, -1, sizeof(::RawMessage)},
  { 92, -1, sizeof(::AnyMessage)},
  { 100, -1, sizeof(::MessageGroup)},
  { 106, -1, sizeof(::MessageBatch)},
  { 112, -1, sizeof(::RawMessageBatch)},
  { 118, -1, sizeof(::MessageGroupBatch)},
  { 124, -1, sizeof(::RequestStatus)},
  { 131, -1, sizeof(::ComparisonSettings)},
  { 138, -1, sizeof(::ValueFilter)},
  { 149, -1, sizeof(::ListValueFilter)},
  { 155, 162, sizeof(::MessageFilter_FieldsEntry_DoNotUse)},
  { 164, -1, sizeof(::MessageFilter)},
  { 173, 180, sizeof(::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse)},
  { 182, 189, sizeof(::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse)},
  { 191, -1, sizeof(::Checkpoint_DirectionCheckpoint)},
  { 197, -1, sizeof(::Checkpoint)},
  { 204, -1, sizeof(::EventID)},
  { 210, -1, sizeof(::Event)},
  { 224, -1, sizeof(::EventBatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConnectionID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageMetadata_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RawMessageMetadata_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RawMessageMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ListValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RawMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AnyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RawMessageBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageGroupBatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ComparisonSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ValueFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ListValueFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageFilter_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Checkpoint_DirectionCheckpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Checkpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EventID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EventBatch_default_instance_),
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014common.proto\032\037google/protobuf/timestam"
  "p.proto\"%\n\014ConnectionID\022\025\n\rsession_alias"
  "\030\001 \001(\t\"w\n\tMessageID\022$\n\rconnection_id\030\001 \001"
  "(\0132\r.ConnectionID\022\035\n\tdirection\030\002 \001(\0162\n.D"
  "irection\022\020\n\010sequence\030\003 \001(\003\022\023\n\013subsequenc"
  "e\030\004 \003(\r\"\351\001\n\017MessageMetadata\022\026\n\002id\030\001 \001(\0132"
  "\n.MessageID\022-\n\ttimestamp\030\002 \001(\0132\032.google."
  "protobuf.Timestamp\022\024\n\014message_type\030\003 \001(\t"
  "\0224\n\nproperties\030\004 \003(\0132 .MessageMetadata.P"
  "ropertiesEntry\022\020\n\010protocol\030\005 \001(\t\0321\n\017Prop"
  "ertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:"
  "\0028\001\"\331\001\n\022RawMessageMetadata\022\026\n\002id\030\001 \001(\0132\n"
  ".MessageID\022-\n\ttimestamp\030\002 \001(\0132\032.google.p"
  "rotobuf.Timestamp\0227\n\nproperties\030\003 \003(\0132#."
  "RawMessageMetadata.PropertiesEntry\022\020\n\010pr"
  "otocol\030\004 \001(\t\0321\n\017PropertiesEntry\022\013\n\003key\030\001"
  " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\216\001\n\005Value\022 \n\nnul"
  "l_value\030\001 \001(\0162\n.NullValueH\000\022\026\n\014simple_va"
  "lue\030\002 \001(\tH\000\022!\n\rmessage_value\030\003 \001(\0132\010.Mes"
  "sageH\000\022 \n\nlist_value\030\004 \001(\0132\n.ListValueH\000"
  "B\006\n\004kind\"#\n\tListValue\022\026\n\006values\030\001 \003(\0132\006."
  "Value\"\255\001\n\007Message\022!\n\017parent_event_id\030\003 \001"
  "(\0132\010.EventID\022\"\n\010metadata\030\001 \001(\0132\020.Message"
  "Metadata\022$\n\006fields\030\002 \003(\0132\024.Message.Field"
  "sEntry\0325\n\013FieldsEntry\022\013\n\003key\030\001 \001(\t\022\025\n\005va"
  "lue\030\002 \001(\0132\006.Value:\0028\001\"A\n\nRawMessage\022%\n\010m"
  "etadata\030\001 \001(\0132\023.RawMessageMetadata\022\014\n\004bo"
  "dy\030\002 \001(\014\"U\n\nAnyMessage\022\033\n\007message\030\001 \001(\0132"
  "\010.MessageH\000\022\"\n\013raw_message\030\002 \001(\0132\013.RawMe"
  "ssageH\000B\006\n\004kind\"-\n\014MessageGroup\022\035\n\010messa"
  "ges\030\001 \003(\0132\013.AnyMessage\"*\n\014MessageBatch\022\032"
  "\n\010messages\030\001 \003(\0132\010.Message\"0\n\017RawMessage"
  "Batch\022\035\n\010messages\030\001 \003(\0132\013.RawMessage\"2\n\021"
  "MessageGroupBatch\022\035\n\006groups\030\001 \003(\0132\r.Mess"
  "ageGroup\"i\n\rRequestStatus\022%\n\006status\030\001 \001("
  "\0162\025.RequestStatus.Status\022\017\n\007message\030\002 \001("
  "\t\" \n\006Status\022\013\n\007SUCCESS\020\000\022\t\n\005ERROR\020\001\"U\n\022C"
  "omparisonSettings\022\025\n\rignore_fields\030\001 \003(\t"
  "\022(\n\017fail_unexpected\030\002 \001(\0162\017.FailUnexpect"
  "ed\"\263\001\n\013ValueFilter\022#\n\toperation\030\001 \001(\0162\020."
  "FilterOperation\022\013\n\003key\030\002 \001(\010\022\027\n\rsimple_f"
  "ilter\030\003 \001(\tH\000\022(\n\016message_filter\030\004 \001(\0132\016."
  "MessageFilterH\000\022\'\n\013list_filter\030\005 \001(\0132\020.L"
  "istValueFilterH\000B\006\n\004kind\"/\n\017ListValueFil"
  "ter\022\034\n\006values\030\001 \003(\0132\014.ValueFilter\"\322\001\n\rMe"
  "ssageFilter\022\023\n\013messageType\030\001 \001(\t\022\021\n\tdire"
  "ction\030\002 \001(\t\022*\n\006fields\030\003 \003(\0132\032.MessageFil"
  "ter.FieldsEntry\0220\n\023comparison_settings\030\004"
  " \001(\0132\023.ComparisonSettings\032;\n\013FieldsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\033\n\005value\030\002 \001(\0132\014.ValueFilt"
  "er:\0028\001\"\223\003\n\nCheckpoint\022\n\n\002id\030\001 \001(\t\022a\n%ses"
  "sion_alias_to_direction_checkpoint\030\002 \003(\013"
  "22.Checkpoint.SessionAliasToDirectionChe"
  "ckpointEntry\032i\n&SessionAliasToDirectionC"
  "heckpointEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value\030\002 \001"
  "(\0132\037.Checkpoint.DirectionCheckpoint:\0028\001\032"
  "\252\001\n\023DirectionCheckpoint\022W\n\025direction_to_"
  "sequence\030\001 \003(\01328.Checkpoint.DirectionChe"
  "ckpoint.DirectionToSequenceEntry\032:\n\030Dire"
  "ctionToSequenceEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005val"
  "ue\030\002 \001(\003:\0028\001\"\025\n\007EventID\022\n\n\002id\030\001 \001(\t\"\224\002\n\005"
  "Event\022\024\n\002id\030\001 \001(\0132\010.EventID\022\033\n\tparent_id"
  "\030\002 \001(\0132\010.EventID\0223\n\017start_timestamp\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\0221\n\rend_tim"
  "estamp\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "\022\034\n\006status\030\005 \001(\0162\014.EventStatus\022\014\n\004name\030\006"
  " \001(\t\022\014\n\004type\030\007 \001(\t\022\014\n\004body\030\010 \001(\014\022(\n\024atta"
  "ched_message_ids\030\t \003(\0132\n.MessageID\"G\n\nEv"
  "entBatch\022!\n\017parent_event_id\030\001 \001(\0132\010.Even"
  "tID\022\026\n\006events\030\002 \003(\0132\006.Event*\"\n\tDirection"
  "\022\t\n\005FIRST\020\000\022\n\n\006SECOND\020\001*\033\n\tNullValue\022\016\n\n"
  "NULL_VALUE\020\000*=\n\016FailUnexpected\022\006\n\002NO\020\000\022\n"
  "\n\006FIELDS\020\001\022\027\n\023FIELDS_AND_MESSAGES\020\002*E\n\017F"
  "ilterOperation\022\t\n\005EQUAL\020\000\022\r\n\tNOT_EQUAL\020\001"
  "\022\t\n\005EMPTY\020\002\022\r\n\tNOT_EMPTY\020\003*&\n\013EventStatu"
  "s\022\013\n\007SUCCESS\020\000\022\n\n\006FAILED\020\001B \n\034com.exactp"
  "ro.th2.common.grpcP\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_common_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_common_2eproto_sccs[23] = {
  &scc_info_AnyMessage_common_2eproto.base,
  &scc_info_Checkpoint_common_2eproto.base,
  &scc_info_Checkpoint_DirectionCheckpoint_common_2eproto.base,
  &scc_info_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_common_2eproto.base,
  &scc_info_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_common_2eproto.base,
  &scc_info_ComparisonSettings_common_2eproto.base,
  &scc_info_ConnectionID_common_2eproto.base,
  &scc_info_Event_common_2eproto.base,
  &scc_info_EventBatch_common_2eproto.base,
  &scc_info_EventID_common_2eproto.base,
  &scc_info_ListValue_common_2eproto.base,
  &scc_info_ListValueFilter_common_2eproto.base,
  &scc_info_MessageBatch_common_2eproto.base,
  &scc_info_MessageGroup_common_2eproto.base,
  &scc_info_MessageGroupBatch_common_2eproto.base,
  &scc_info_MessageID_common_2eproto.base,
  &scc_info_MessageMetadata_common_2eproto.base,
  &scc_info_MessageMetadata_PropertiesEntry_DoNotUse_common_2eproto.base,
  &scc_info_RawMessage_common_2eproto.base,
  &scc_info_RawMessageBatch_common_2eproto.base,
  &scc_info_RawMessageMetadata_common_2eproto.base,
  &scc_info_RawMessageMetadata_PropertiesEntry_DoNotUse_common_2eproto.base,
  &scc_info_RequestStatus_common_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_common_2eproto_once;
static bool descriptor_table_common_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto = {
  &descriptor_table_common_2eproto_initialized, descriptor_table_protodef_common_2eproto, "common.proto", 3068,
  &descriptor_table_common_2eproto_once, descriptor_table_common_2eproto_sccs, descriptor_table_common_2eproto_deps, 23, 1,
  schemas, file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 29, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_common_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool RequestStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RequestStatus_Status RequestStatus::SUCCESS;
constexpr RequestStatus_Status RequestStatus::ERROR;
constexpr RequestStatus_Status RequestStatus::Status_MIN;
constexpr RequestStatus_Status RequestStatus::Status_MAX;
constexpr int RequestStatus::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NullValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool NullValue_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailUnexpected_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool FailUnexpected_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool FilterOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool EventStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ConnectionID::InitAsDefaultInstance() {
}
class ConnectionID::_Internal {
 public:
};

ConnectionID::ConnectionID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectionID)
}
ConnectionID::ConnectionID(const ConnectionID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_alias().empty()) {
    session_alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_alias_);
  }
  // @@protoc_insertion_point(copy_constructor:ConnectionID)
}

void ConnectionID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectionID_common_2eproto.base);
  session_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnectionID::~ConnectionID() {
  // @@protoc_insertion_point(destructor:ConnectionID)
  SharedDtor();
}

void ConnectionID::SharedDtor() {
  session_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectionID& ConnectionID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectionID_common_2eproto.base);
  return *internal_default_instance();
}


void ConnectionID::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConnectionID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ConnectionID.session_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectionID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_alias = 1;
  if (this->session_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_alias().data(), static_cast<int>(this->_internal_session_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ConnectionID.session_alias");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionID)
  return target;
}

size_t ConnectionID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_alias = 1;
  if (this->session_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_alias());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectionID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectionID)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectionID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectionID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectionID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectionID)
    MergeFrom(*source);
  }
}

void ConnectionID::MergeFrom(const ConnectionID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_alias().size() > 0) {

    session_alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_alias_);
  }
}

void ConnectionID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectionID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionID::CopyFrom(const ConnectionID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionID::IsInitialized() const {
  return true;
}

void ConnectionID::InternalSwap(ConnectionID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_alias_.Swap(&other->session_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageID::InitAsDefaultInstance() {
  ::_MessageID_default_instance_._instance.get_mutable()->connection_id_ = const_cast< ::ConnectionID*>(
      ::ConnectionID::internal_default_instance());
}
class MessageID::_Internal {
 public:
  static const ::ConnectionID& connection_id(const MessageID* msg);
};

const ::ConnectionID&
MessageID::_Internal::connection_id(const MessageID* msg) {
  return *msg->connection_id_;
}
MessageID::MessageID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageID)
}
MessageID::MessageID(const MessageID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subsequence_(from.subsequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_connection_id()) {
    connection_id_ = new ::ConnectionID(*from.connection_id_);
  } else {
    connection_id_ = nullptr;
  }
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:MessageID)
}

void MessageID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageID_common_2eproto.base);
  ::memset(&connection_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&connection_id_)) + sizeof(direction_));
}

MessageID::~MessageID() {
  // @@protoc_insertion_point(destructor:MessageID)
  SharedDtor();
}

void MessageID::SharedDtor() {
  if (this != internal_default_instance()) delete connection_id_;
}

void MessageID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageID& MessageID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageID_common_2eproto.base);
  return *internal_default_instance();
}


void MessageID::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subsequence_.Clear();
  if (GetArenaNoVirtual() == nullptr && connection_id_ != nullptr) {
    delete connection_id_;
  }
  connection_id_ = nullptr;
  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

const char* MessageID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ConnectionID connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::Direction>(val));
        } else goto handle_unusual;
        continue;
      // int64 sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 subsequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_subsequence(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_subsequence(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ConnectionID connection_id = 1;
  if (this->has_connection_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::connection_id(this), target, stream);
  }

  // .Direction direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // int64 sequence = 3;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sequence(), target);
  }

  // repeated uint32 subsequence = 4;
  {
    int byte_size = _subsequence_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_subsequence(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageID)
  return target;
}

size_t MessageID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 subsequence = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->subsequence_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _subsequence_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ConnectionID connection_id = 1;
  if (this->has_connection_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_id_);
  }

  // int64 sequence = 3;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sequence());
  }

  // .Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageID)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageID)
    MergeFrom(*source);
  }
}

void MessageID::MergeFrom(const MessageID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subsequence_.MergeFrom(from.subsequence_);
  if (from.has_connection_id()) {
    _internal_mutable_connection_id()->::ConnectionID::MergeFrom(from._internal_connection_id());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void MessageID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageID::CopyFrom(const MessageID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageID::IsInitialized() const {
  return true;
}

void MessageID::InternalSwap(MessageID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subsequence_.InternalSwap(&other->subsequence_);
  swap(connection_id_, other->connection_id_);
  swap(sequence_, other->sequence_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MessageMetadata_PropertiesEntry_DoNotUse::MessageMetadata_PropertiesEntry_DoNotUse() {}
MessageMetadata_PropertiesEntry_DoNotUse::MessageMetadata_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageMetadata_PropertiesEntry_DoNotUse::MergeFrom(const MessageMetadata_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageMetadata_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MessageMetadata_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MessageMetadata::InitAsDefaultInstance() {
  ::_MessageMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::MessageID*>(
      ::MessageID::internal_default_instance());
  ::_MessageMetadata_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class MessageMetadata::_Internal {
 public:
  static const ::MessageID& id(const MessageMetadata* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MessageMetadata* msg);
};

const ::MessageID&
MessageMetadata::_Internal::id(const MessageMetadata* msg) {
  return *msg->id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageMetadata::_Internal::timestamp(const MessageMetadata* msg) {
  return *msg->timestamp_;
}
void MessageMetadata::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
MessageMetadata::MessageMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageMetadata)
}
MessageMetadata::MessageMetadata(const MessageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from._internal_has_id()) {
    id_ = new ::MessageID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MessageMetadata)
}

void MessageMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageMetadata_common_2eproto.base);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

MessageMetadata::~MessageMetadata() {
  // @@protoc_insertion_point(destructor:MessageMetadata)
  SharedDtor();
}

void MessageMetadata::SharedDtor() {
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void MessageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMetadata& MessageMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageMetadata_common_2eproto.base);
  return *internal_default_instance();
}


void MessageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MessageMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MessageID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageMetadata.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string protocol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageMetadata.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageMetadata.message_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_type(), target);
  }

  // map<string, string> properties = 4;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MessageMetadata.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MessageMetadata.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MessageMetadata_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = MessageMetadata_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageMetadata.protocol");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageMetadata)
  return target;
}

size_t MessageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += MessageMetadata_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // string protocol = 5;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // .MessageID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageMetadata)
    MergeFrom(*source);
  }
}

void MessageMetadata::MergeFrom(const MessageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.message_type().size() > 0) {

    message_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_type_);
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::MessageID::MergeFrom(from._internal_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void MessageMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMetadata::CopyFrom(const MessageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMetadata::IsInitialized() const {
  return true;
}

void MessageMetadata::InternalSwap(MessageMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

RawMessageMetadata_PropertiesEntry_DoNotUse::RawMessageMetadata_PropertiesEntry_DoNotUse() {}
RawMessageMetadata_PropertiesEntry_DoNotUse::RawMessageMetadata_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RawMessageMetadata_PropertiesEntry_DoNotUse::MergeFrom(const RawMessageMetadata_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RawMessageMetadata_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RawMessageMetadata_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RawMessageMetadata::InitAsDefaultInstance() {
  ::_RawMessageMetadata_default_instance_._instance.get_mutable()->id_ = const_cast< ::MessageID*>(
      ::MessageID::internal_default_instance());
  ::_RawMessageMetadata_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RawMessageMetadata::_Internal {
 public:
  static const ::MessageID& id(const RawMessageMetadata* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RawMessageMetadata* msg);
};

const ::MessageID&
RawMessageMetadata::_Internal::id(const RawMessageMetadata* msg) {
  return *msg->id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RawMessageMetadata::_Internal::timestamp(const RawMessageMetadata* msg) {
  return *msg->timestamp_;
}
void RawMessageMetadata::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RawMessageMetadata::RawMessageMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RawMessageMetadata)
}
RawMessageMetadata::RawMessageMetadata(const RawMessageMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from._internal_has_id()) {
    id_ = new ::MessageID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RawMessageMetadata)
}

void RawMessageMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawMessageMetadata_common_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(timestamp_));
}

RawMessageMetadata::~RawMessageMetadata() {
  // @@protoc_insertion_point(destructor:RawMessageMetadata)
  SharedDtor();
}

void RawMessageMetadata::SharedDtor() {
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete timestamp_;
}

void RawMessageMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawMessageMetadata& RawMessageMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawMessageMetadata_common_2eproto.base);
  return *internal_default_instance();
}


void RawMessageMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:RawMessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RawMessageMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MessageID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RawMessageMetadata.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawMessageMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawMessageMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // map<string, string> properties = 3;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RawMessageMetadata.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "RawMessageMetadata.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RawMessageMetadata_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = RawMessageMetadata_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string protocol = 4;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RawMessageMetadata.protocol");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawMessageMetadata)
  return target;
}

size_t RawMessageMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawMessageMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += RawMessageMetadata_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string protocol = 4;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // .MessageID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawMessageMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RawMessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const RawMessageMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawMessageMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RawMessageMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RawMessageMetadata)
    MergeFrom(*source);
  }
}

void RawMessageMetadata::MergeFrom(const RawMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawMessageMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::MessageID::MergeFrom(from._internal_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void RawMessageMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RawMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawMessageMetadata::CopyFrom(const RawMessageMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawMessageMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessageMetadata::IsInitialized() const {
  return true;
}

void RawMessageMetadata::InternalSwap(RawMessageMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawMessageMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Value::InitAsDefaultInstance() {
  ::_Value_default_instance_.null_value_ = 0;
  ::_Value_default_instance_.simple_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::_Value_default_instance_.message_value_ = const_cast< ::Message*>(
      ::Message::internal_default_instance());
  ::_Value_default_instance_.list_value_ = const_cast< ::ListValue*>(
      ::ListValue::internal_default_instance());
}
class Value::_Internal {
 public:
  static const ::Message& message_value(const Value* msg);
  static const ::ListValue& list_value(const Value* msg);
};

const ::Message&
Value::_Internal::message_value(const Value* msg) {
  return *msg->kind_.message_value_;
}
const ::ListValue&
Value::_Internal::list_value(const Value* msg) {
  return *msg->kind_.list_value_;
}
void Value::set_allocated_message_value(::Message* message_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (message_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_value, submessage_arena);
    }
    set_has_message_value();
    kind_.message_value_ = message_value;
  }
  // @@protoc_insertion_point(field_set_allocated:Value.message_value)
}
void Value::set_allocated_list_value(::ListValue* list_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (list_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value, submessage_arena);
    }
    set_has_list_value();
    kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_set_allocated:Value.list_value)
}
Value::Value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Value)
}
Value::Value(const Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNullValue: {
      _internal_set_null_value(from._internal_null_value());
      break;
    }
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kMessageValue: {
      _internal_mutable_message_value()->::Message::MergeFrom(from._internal_message_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Value)
}

void Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValue_common_2eproto.base);
  clear_has_kind();
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Value& Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValue_common_2eproto.base);
  return *internal_default_instance();
}


void Value::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:Value)
  switch (kind_case()) {
    case kNullValue: {
      // No need to clear
      break;
    }
    case kSimpleValue: {
      kind_.simple_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kMessageValue: {
      delete kind_.message_value_;
      break;
    }
    case kListValue: {
      delete kind_.list_value_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

const char* Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NullValue null_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_null_value(static_cast<::NullValue>(val));
        } else goto handle_unusual;
        continue;
      // string simple_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_simple_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Value.simple_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Message message_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ListValue list_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NullValue null_value = 1;
  if (_internal_has_null_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_null_value(), target);
  }

  // string simple_value = 2;
  if (_internal_has_simple_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_simple_value().data(), static_cast<int>(this->_internal_simple_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Value.simple_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_simple_value(), target);
  }

  // .Message message_value = 3;
  if (_internal_has_message_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message_value(this), target, stream);
  }

  // .ListValue list_value = 4;
  if (_internal_has_list_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::list_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .NullValue null_value = 1;
    case kNullValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_null_value());
      break;
    }
    // string simple_value = 2;
    case kSimpleValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simple_value());
      break;
    }
    // .Message message_value = 3;
    case kMessageValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.message_value_);
      break;
    }
    // .ListValue list_value = 4;
    case kListValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_value_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNullValue: {
      _internal_set_null_value(from._internal_null_value());
      break;
    }
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kMessageValue: {
      _internal_mutable_message_value()->::Message::MergeFrom(from._internal_message_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::InternalSwap(Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListValue::InitAsDefaultInstance() {
}
class ListValue::_Internal {
 public:
};

ListValue::ListValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListValue)
}
ListValue::ListValue(const ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ListValue)
}

void ListValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValue_common_2eproto.base);
}

ListValue::~ListValue() {
  // @@protoc_insertion_point(destructor:ListValue)
  SharedDtor();
}

void ListValue::SharedDtor() {
}

void ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValue& ListValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValue_common_2eproto.base);
  return *internal_default_instance();
}


void ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* ListValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Value values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Value values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListValue)
  return target;
}

size_t ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Value values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListValue)
    MergeFrom(*source);
  }
}

void ListValue::MergeFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValue::CopyFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValue::IsInitialized() const {
  return true;
}

void ListValue::InternalSwap(ListValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Message_FieldsEntry_DoNotUse::Message_FieldsEntry_DoNotUse() {}
Message_FieldsEntry_DoNotUse::Message_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Message_FieldsEntry_DoNotUse::MergeFrom(const Message_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Message_FieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Message_FieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::_Message_default_instance_._instance.get_mutable()->parent_event_id_ = const_cast< ::EventID*>(
      ::EventID::internal_default_instance());
  ::_Message_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::MessageMetadata*>(
      ::MessageMetadata::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::EventID& parent_event_id(const Message* msg);
  static const ::MessageMetadata& metadata(const Message* msg);
};

const ::EventID&
Message::_Internal::parent_event_id(const Message* msg) {
  return *msg->parent_event_id_;
}
const ::MessageMetadata&
Message::_Internal::metadata(const Message* msg) {
  return *msg->metadata_;
}
Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::MessageMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_parent_event_id()) {
    parent_event_id_ = new ::EventID(*from.parent_event_id_);
  } else {
    parent_event_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValue_common_2eproto.base);
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_event_id_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(parent_event_id_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete parent_event_id_;
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValue_common_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_event_id_ != nullptr) {
    delete parent_event_id_;
  }
  parent_event_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MessageMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Value> fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .EventID parent_event_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_event_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // map<string, .Value> fields = 2;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Message.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Message_FieldsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = Message_FieldsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .EventID parent_event_id = 3;
  if (this->has_parent_event_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parent_event_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Value> fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += Message_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .MessageMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .EventID parent_event_id = 3;
  if (this->has_parent_event_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_event_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::MessageMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.has_parent_event_id()) {
    _internal_mutable_parent_event_id()->::EventID::MergeFrom(from._internal_parent_event_id());
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.Swap(&other->fields_);
  swap(metadata_, other->metadata_);
  swap(parent_event_id_, other->parent_event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawMessage::InitAsDefaultInstance() {
  ::_RawMessage_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::RawMessageMetadata*>(
      ::RawMessageMetadata::internal_default_instance());
}
class RawMessage::_Internal {
 public:
  static const ::RawMessageMetadata& metadata(const RawMessage* msg);
};

const ::RawMessageMetadata&
RawMessage::_Internal::metadata(const RawMessage* msg) {
  return *msg->metadata_;
}
RawMessage::RawMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RawMessage)
}
RawMessage::RawMessage(const RawMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::RawMessageMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:RawMessage)
}

void RawMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawMessage_common_2eproto.base);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
}

RawMessage::~RawMessage() {
  // @@protoc_insertion_point(destructor:RawMessage)
  SharedDtor();
}

void RawMessage::SharedDtor() {
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void RawMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawMessage& RawMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawMessage_common_2eproto.base);
  return *internal_default_instance();
}


void RawMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:RawMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RawMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RawMessageMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RawMessageMetadata metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawMessage)
  return target;
}

size_t RawMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // .RawMessageMetadata metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RawMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RawMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RawMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RawMessage)
    MergeFrom(*source);
  }
}

void RawMessage::MergeFrom(const RawMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::RawMessageMetadata::MergeFrom(from._internal_metadata());
  }
}

void RawMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RawMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawMessage::CopyFrom(const RawMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessage::IsInitialized() const {
  return true;
}

void RawMessage::InternalSwap(RawMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnyMessage::InitAsDefaultInstance() {
  ::_AnyMessage_default_instance_.message_ = const_cast< ::Message*>(
      ::Message::internal_default_instance());
  ::_AnyMessage_default_instance_.raw_message_ = const_cast< ::RawMessage*>(
      ::RawMessage::internal_default_instance());
}
class AnyMessage::_Internal {
 public:
  static const ::Message& message(const AnyMessage* msg);
  static const ::RawMessage& raw_message(const AnyMessage* msg);
};

const ::Message&
AnyMessage::_Internal::message(const AnyMessage* msg) {
  return *msg->kind_.message_;
}
const ::RawMessage&
AnyMessage::_Internal::raw_message(const AnyMessage* msg) {
  return *msg->kind_.raw_message_;
}
void AnyMessage::set_allocated_message(::Message* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    kind_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyMessage.message)
}
void AnyMessage::set_allocated_raw_message(::RawMessage* raw_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (raw_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_message, submessage_arena);
    }
    set_has_raw_message();
    kind_.raw_message_ = raw_message;
  }
  // @@protoc_insertion_point(field_set_allocated:AnyMessage.raw_message)
}
AnyMessage::AnyMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AnyMessage)
}
AnyMessage::AnyMessage(const AnyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kMessage: {
      _internal_mutable_message()->::Message::MergeFrom(from._internal_message());
      break;
    }
    case kRawMessage: {
      _internal_mutable_raw_message()->::RawMessage::MergeFrom(from._internal_raw_message());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:AnyMessage)
}

void AnyMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnyMessage_common_2eproto.base);
  clear_has_kind();
}

AnyMessage::~AnyMessage() {
  // @@protoc_insertion_point(destructor:AnyMessage)
  SharedDtor();
}

void AnyMessage::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void AnyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnyMessage& AnyMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnyMessage_common_2eproto.base);
  return *internal_default_instance();
}


void AnyMessage::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:AnyMessage)
  switch (kind_case()) {
    case kMessage: {
      delete kind_.message_;
      break;
    }
    case kRawMessage: {
      delete kind_.raw_message_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void AnyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AnyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

const char* AnyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Message message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .RawMessage raw_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AnyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Message message = 1;
  if (_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::message(this), target, stream);
  }

  // .RawMessage raw_message = 2;
  if (_internal_has_raw_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::raw_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AnyMessage)
  return target;
}

size_t AnyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AnyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .Message message = 1;
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.message_);
      break;
    }
    // .RawMessage raw_message = 2;
    case kRawMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.raw_message_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AnyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AnyMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AnyMessage)
    MergeFrom(*source);
  }
}

void AnyMessage::MergeFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AnyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kMessage: {
      _internal_mutable_message()->::Message::MergeFrom(from._internal_message());
      break;
    }
    case kRawMessage: {
      _internal_mutable_raw_message()->::RawMessage::MergeFrom(from._internal_raw_message());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void AnyMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyMessage::CopyFrom(const AnyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AnyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyMessage::IsInitialized() const {
  return true;
}

void AnyMessage::InternalSwap(AnyMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageGroup::InitAsDefaultInstance() {
}
class MessageGroup::_Internal {
 public:
};

MessageGroup::MessageGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGroup)
}
MessageGroup::MessageGroup(const MessageGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MessageGroup)
}

void MessageGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageGroup_common_2eproto.base);
}

MessageGroup::~MessageGroup() {
  // @@protoc_insertion_point(destructor:MessageGroup)
  SharedDtor();
}

void MessageGroup::SharedDtor() {
}

void MessageGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageGroup& MessageGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageGroup_common_2eproto.base);
  return *internal_default_instance();
}


void MessageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AnyMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AnyMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGroup)
  return target;
}

size_t MessageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AnyMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageGroup)
    MergeFrom(*source);
  }
}

void MessageGroup::MergeFrom(const MessageGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MessageGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGroup::CopyFrom(const MessageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGroup::IsInitialized() const {
  return true;
}

void MessageGroup::InternalSwap(MessageGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageBatch::InitAsDefaultInstance() {
}
class MessageBatch::_Internal {
 public:
};

MessageBatch::MessageBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBatch)
}
MessageBatch::MessageBatch(const MessageBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MessageBatch)
}

void MessageBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBatch_common_2eproto.base);
}

MessageBatch::~MessageBatch() {
  // @@protoc_insertion_point(destructor:MessageBatch)
  SharedDtor();
}

void MessageBatch::SharedDtor() {
}

void MessageBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBatch& MessageBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBatch_common_2eproto.base);
  return *internal_default_instance();
}


void MessageBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Message messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageBatch)
  return target;
}

size_t MessageBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Message messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageBatch)
    MergeFrom(*source);
  }
}

void MessageBatch::MergeFrom(const MessageBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void MessageBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBatch::CopyFrom(const MessageBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBatch::IsInitialized() const {
  return true;
}

void MessageBatch::InternalSwap(MessageBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawMessageBatch::InitAsDefaultInstance() {
}
class RawMessageBatch::_Internal {
 public:
};

RawMessageBatch::RawMessageBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RawMessageBatch)
}
RawMessageBatch::RawMessageBatch(const RawMessageBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RawMessageBatch)
}

void RawMessageBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawMessageBatch_common_2eproto.base);
}

RawMessageBatch::~RawMessageBatch() {
  // @@protoc_insertion_point(destructor:RawMessageBatch)
  SharedDtor();
}

void RawMessageBatch::SharedDtor() {
}

void RawMessageBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawMessageBatch& RawMessageBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawMessageBatch_common_2eproto.base);
  return *internal_default_instance();
}


void RawMessageBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:RawMessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _internal_metadata_.Clear();
}

const char* RawMessageBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .RawMessage messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawMessageBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RawMessageBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RawMessage messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RawMessageBatch)
  return target;
}

size_t RawMessageBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RawMessageBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RawMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawMessageBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RawMessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const RawMessageBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawMessageBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RawMessageBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RawMessageBatch)
    MergeFrom(*source);
  }
}

void RawMessageBatch::MergeFrom(const RawMessageBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RawMessageBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void RawMessageBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RawMessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawMessageBatch::CopyFrom(const RawMessageBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RawMessageBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawMessageBatch::IsInitialized() const {
  return true;
}

void RawMessageBatch::InternalSwap(RawMessageBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawMessageBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageGroupBatch::InitAsDefaultInstance() {
}
class MessageGroupBatch::_Internal {
 public:
};

MessageGroupBatch::MessageGroupBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGroupBatch)
}
MessageGroupBatch::MessageGroupBatch(const MessageGroupBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MessageGroupBatch)
}

void MessageGroupBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageGroupBatch_common_2eproto.base);
}

MessageGroupBatch::~MessageGroupBatch() {
  // @@protoc_insertion_point(destructor:MessageGroupBatch)
  SharedDtor();
}

void MessageGroupBatch::SharedDtor() {
}

void MessageGroupBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageGroupBatch& MessageGroupBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageGroupBatch_common_2eproto.base);
  return *internal_default_instance();
}


void MessageGroupBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageGroupBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageGroupBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .MessageGroup groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageGroupBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGroupBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MessageGroup groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGroupBatch)
  return target;
}

size_t MessageGroupBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageGroupBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MessageGroup groups = 1;
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageGroupBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageGroupBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageGroupBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageGroupBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageGroupBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageGroupBatch)
    MergeFrom(*source);
  }
}

void MessageGroupBatch::MergeFrom(const MessageGroupBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageGroupBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
}

void MessageGroupBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageGroupBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGroupBatch::CopyFrom(const MessageGroupBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageGroupBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGroupBatch::IsInitialized() const {
  return true;
}

void MessageGroupBatch::InternalSwap(MessageGroupBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageGroupBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestStatus::InitAsDefaultInstance() {
}
class RequestStatus::_Internal {
 public:
};

RequestStatus::RequestStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestStatus)
}
RequestStatus::RequestStatus(const RequestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:RequestStatus)
}

void RequestStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestStatus_common_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

RequestStatus::~RequestStatus() {
  // @@protoc_insertion_point(destructor:RequestStatus)
  SharedDtor();
}

void RequestStatus::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestStatus& RequestStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestStatus_common_2eproto.base);
  return *internal_default_instance();
}


void RequestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* RequestStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RequestStatus.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::RequestStatus_Status>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RequestStatus.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RequestStatus.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestStatus)
  return target;
}

size_t RequestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .RequestStatus.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestStatus)
    MergeFrom(*source);
  }
}

void RequestStatus::MergeFrom(const RequestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RequestStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStatus::CopyFrom(const RequestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatus::IsInitialized() const {
  return true;
}

void RequestStatus::InternalSwap(RequestStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ComparisonSettings::InitAsDefaultInstance() {
}
class ComparisonSettings::_Internal {
 public:
};

ComparisonSettings::ComparisonSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ComparisonSettings)
}
ComparisonSettings::ComparisonSettings(const ComparisonSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ignore_fields_(from.ignore_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fail_unexpected_ = from.fail_unexpected_;
  // @@protoc_insertion_point(copy_constructor:ComparisonSettings)
}

void ComparisonSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ComparisonSettings_common_2eproto.base);
  fail_unexpected_ = 0;
}

ComparisonSettings::~ComparisonSettings() {
  // @@protoc_insertion_point(destructor:ComparisonSettings)
  SharedDtor();
}

void ComparisonSettings::SharedDtor() {
}

void ComparisonSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ComparisonSettings& ComparisonSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ComparisonSettings_common_2eproto.base);
  return *internal_default_instance();
}


void ComparisonSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ComparisonSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignore_fields_.Clear();
  fail_unexpected_ = 0;
  _internal_metadata_.Clear();
}

const char* ComparisonSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ignore_fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignore_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ComparisonSettings.ignore_fields"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .FailUnexpected fail_unexpected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_fail_unexpected(static_cast<::FailUnexpected>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ComparisonSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComparisonSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ignore_fields = 1;
  for (int i = 0, n = this->_internal_ignore_fields_size(); i < n; i++) {
    const auto& s = this->_internal_ignore_fields(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ComparisonSettings.ignore_fields");
    target = stream->WriteString(1, s, target);
  }

  // .FailUnexpected fail_unexpected = 2;
  if (this->fail_unexpected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fail_unexpected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComparisonSettings)
  return target;
}

size_t ComparisonSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComparisonSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ignore_fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignore_fields_.size());
  for (int i = 0, n = ignore_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ignore_fields_.Get(i));
  }

  // .FailUnexpected fail_unexpected = 2;
  if (this->fail_unexpected() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fail_unexpected());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComparisonSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ComparisonSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ComparisonSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ComparisonSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ComparisonSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ComparisonSettings)
    MergeFrom(*source);
  }
}

void ComparisonSettings::MergeFrom(const ComparisonSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComparisonSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignore_fields_.MergeFrom(from.ignore_fields_);
  if (from.fail_unexpected() != 0) {
    _internal_set_fail_unexpected(from._internal_fail_unexpected());
  }
}

void ComparisonSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ComparisonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonSettings::CopyFrom(const ComparisonSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComparisonSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonSettings::IsInitialized() const {
  return true;
}

void ComparisonSettings::InternalSwap(ComparisonSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ignore_fields_.InternalSwap(&other->ignore_fields_);
  swap(fail_unexpected_, other->fail_unexpected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComparisonSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueFilter::InitAsDefaultInstance() {
  ::_ValueFilter_default_instance_.simple_filter_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::_ValueFilter_default_instance_.message_filter_ = const_cast< ::MessageFilter*>(
      ::MessageFilter::internal_default_instance());
  ::_ValueFilter_default_instance_.list_filter_ = const_cast< ::ListValueFilter*>(
      ::ListValueFilter::internal_default_instance());
}
class ValueFilter::_Internal {
 public:
  static const ::MessageFilter& message_filter(const ValueFilter* msg);
  static const ::ListValueFilter& list_filter(const ValueFilter* msg);
};

const ::MessageFilter&
ValueFilter::_Internal::message_filter(const ValueFilter* msg) {
  return *msg->kind_.message_filter_;
}
const ::ListValueFilter&
ValueFilter::_Internal::list_filter(const ValueFilter* msg) {
  return *msg->kind_.list_filter_;
}
void ValueFilter::set_allocated_message_filter(::MessageFilter* message_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (message_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_filter, submessage_arena);
    }
    set_has_message_filter();
    kind_.message_filter_ = message_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:ValueFilter.message_filter)
}
void ValueFilter::set_allocated_list_filter(::ListValueFilter* list_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (list_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      list_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_filter, submessage_arena);
    }
    set_has_list_filter();
    kind_.list_filter_ = list_filter;
  }
  // @@protoc_insertion_point(field_set_allocated:ValueFilter.list_filter)
}
ValueFilter::ValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ValueFilter)
}
ValueFilter::ValueFilter(const ValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&operation_, &from.operation_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&operation_)) + sizeof(key_));
  clear_has_kind();
  switch (from.kind_case()) {
    case kSimpleFilter: {
      _internal_set_simple_filter(from._internal_simple_filter());
      break;
    }
    case kMessageFilter: {
      _internal_mutable_message_filter()->::MessageFilter::MergeFrom(from._internal_message_filter());
      break;
    }
    case kListFilter: {
      _internal_mutable_list_filter()->::ListValueFilter::MergeFrom(from._internal_list_filter());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ValueFilter)
}

void ValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValueFilter_common_2eproto.base);
  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(key_));
  clear_has_kind();
}

ValueFilter::~ValueFilter() {
  // @@protoc_insertion_point(destructor:ValueFilter)
  SharedDtor();
}

void ValueFilter::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void ValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueFilter& ValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValueFilter_common_2eproto.base);
  return *internal_default_instance();
}


void ValueFilter::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:ValueFilter)
  switch (kind_case()) {
    case kSimpleFilter: {
      kind_.simple_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kMessageFilter: {
      delete kind_.message_filter_;
      break;
    }
    case kListFilter: {
      delete kind_.list_filter_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void ValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:ValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&operation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&operation_)) + sizeof(key_));
  clear_kind();
  _internal_metadata_.Clear();
}

const char* ValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .FilterOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::FilterOperation>(val));
        } else goto handle_unusual;
        continue;
      // bool key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string simple_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_simple_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ValueFilter.simple_filter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MessageFilter message_filter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ListValueFilter list_filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FilterOperation operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // bool key = 2;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_key(), target);
  }

  // string simple_filter = 3;
  if (_internal_has_simple_filter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_simple_filter().data(), static_cast<int>(this->_internal_simple_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ValueFilter.simple_filter");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_simple_filter(), target);
  }

  // .MessageFilter message_filter = 4;
  if (_internal_has_message_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::message_filter(this), target, stream);
  }

  // .ListValueFilter list_filter = 5;
  if (_internal_has_list_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::list_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ValueFilter)
  return target;
}

size_t ValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ValueFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .FilterOperation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // bool key = 2;
  if (this->key() != 0) {
    total_size += 1 + 1;
  }

  switch (kind_case()) {
    // string simple_filter = 3;
    case kSimpleFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_simple_filter());
      break;
    }
    // .MessageFilter message_filter = 4;
    case kMessageFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.message_filter_);
      break;
    }
    // .ListValueFilter list_filter = 5;
    case kListFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_filter_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ValueFilter)
    MergeFrom(*source);
  }
}

void ValueFilter::MergeFrom(const ValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  switch (from.kind_case()) {
    case kSimpleFilter: {
      _internal_set_simple_filter(from._internal_simple_filter());
      break;
    }
    case kMessageFilter: {
      _internal_mutable_message_filter()->::MessageFilter::MergeFrom(from._internal_message_filter());
      break;
    }
    case kListFilter: {
      _internal_mutable_list_filter()->::ListValueFilter::MergeFrom(from._internal_list_filter());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void ValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueFilter::CopyFrom(const ValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueFilter::IsInitialized() const {
  return true;
}

void ValueFilter::InternalSwap(ValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
  swap(key_, other->key_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListValueFilter::InitAsDefaultInstance() {
}
class ListValueFilter::_Internal {
 public:
};

ListValueFilter::ListValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListValueFilter)
}
ListValueFilter::ListValueFilter(const ListValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ListValueFilter)
}

void ListValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValueFilter_common_2eproto.base);
}

ListValueFilter::~ListValueFilter() {
  // @@protoc_insertion_point(destructor:ListValueFilter)
  SharedDtor();
}

void ListValueFilter::SharedDtor() {
}

void ListValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListValueFilter& ListValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValueFilter_common_2eproto.base);
  return *internal_default_instance();
}


void ListValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:ListValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

const char* ListValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ValueFilter values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValueFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ListValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ValueFilter values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListValueFilter)
  return target;
}

size_t ListValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListValueFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ValueFilter values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListValueFilter)
    MergeFrom(*source);
  }
}

void ListValueFilter::MergeFrom(const ListValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValueFilter::CopyFrom(const ListValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValueFilter::IsInitialized() const {
  return true;
}

void ListValueFilter::InternalSwap(ListValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

MessageFilter_FieldsEntry_DoNotUse::MessageFilter_FieldsEntry_DoNotUse() {}
MessageFilter_FieldsEntry_DoNotUse::MessageFilter_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MessageFilter_FieldsEntry_DoNotUse::MergeFrom(const MessageFilter_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MessageFilter_FieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void MessageFilter_FieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void MessageFilter::InitAsDefaultInstance() {
  ::_MessageFilter_default_instance_._instance.get_mutable()->comparison_settings_ = const_cast< ::ComparisonSettings*>(
      ::ComparisonSettings::internal_default_instance());
}
class MessageFilter::_Internal {
 public:
  static const ::ComparisonSettings& comparison_settings(const MessageFilter* msg);
};

const ::ComparisonSettings&
MessageFilter::_Internal::comparison_settings(const MessageFilter* msg) {
  return *msg->comparison_settings_;
}
MessageFilter::MessageFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageFilter)
}
MessageFilter::MessageFilter(const MessageFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  messagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_messagetype().empty()) {
    messagetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_direction().empty()) {
    direction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from._internal_has_comparison_settings()) {
    comparison_settings_ = new ::ComparisonSettings(*from.comparison_settings_);
  } else {
    comparison_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MessageFilter)
}

void MessageFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListValueFilter_common_2eproto.base);
  messagetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comparison_settings_ = nullptr;
}

MessageFilter::~MessageFilter() {
  // @@protoc_insertion_point(destructor:MessageFilter)
  SharedDtor();
}

void MessageFilter::SharedDtor() {
  messagetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete comparison_settings_;
}

void MessageFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageFilter& MessageFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListValueFilter_common_2eproto.base);
  return *internal_default_instance();
}


void MessageFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  messagetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && comparison_settings_ != nullptr) {
    delete comparison_settings_;
  }
  comparison_settings_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MessageFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_messagetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageFilter.messageType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MessageFilter.direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .ValueFilter> fields = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .ComparisonSettings comparison_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_comparison_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string messageType = 1;
  if (this->messagetype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messagetype().data(), static_cast<int>(this->_internal_messagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageFilter.messageType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_messagetype(), target);
  }

  // string direction = 2;
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageFilter.direction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_direction(), target);
  }

  // map<string, .ValueFilter> fields = 3;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "MessageFilter.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MessageFilter_FieldsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = MessageFilter_FieldsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .ComparisonSettings comparison_settings = 4;
  if (this->has_comparison_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::comparison_settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageFilter)
  return target;
}

size_t MessageFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .ValueFilter> fields = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += MessageFilter_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string messageType = 1;
  if (this->messagetype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messagetype());
  }

  // string direction = 2;
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // .ComparisonSettings comparison_settings = 4;
  if (this->has_comparison_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *comparison_settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageFilter)
    MergeFrom(*source);
  }
}

void MessageFilter::MergeFrom(const MessageFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.messagetype().size() > 0) {

    messagetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
  }
  if (from.direction().size() > 0) {

    direction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.direction_);
  }
  if (from.has_comparison_settings()) {
    _internal_mutable_comparison_settings()->::ComparisonSettings::MergeFrom(from._internal_comparison_settings());
  }
}

void MessageFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageFilter::CopyFrom(const MessageFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFilter::IsInitialized() const {
  return true;
}

void MessageFilter::InternalSwap(MessageFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fields_.Swap(&other->fields_);
  messagetype_.Swap(&other->messagetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(comparison_settings_, other->comparison_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse() {}
Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::MergeFrom(const Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse() {}
Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::MergeFrom(const Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Checkpoint_DirectionCheckpoint::InitAsDefaultInstance() {
}
class Checkpoint_DirectionCheckpoint::_Internal {
 public:
};

Checkpoint_DirectionCheckpoint::Checkpoint_DirectionCheckpoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Checkpoint.DirectionCheckpoint)
}
Checkpoint_DirectionCheckpoint::Checkpoint_DirectionCheckpoint(const Checkpoint_DirectionCheckpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  direction_to_sequence_.MergeFrom(from.direction_to_sequence_);
  // @@protoc_insertion_point(copy_constructor:Checkpoint.DirectionCheckpoint)
}

void Checkpoint_DirectionCheckpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Checkpoint_DirectionCheckpoint_common_2eproto.base);
}

Checkpoint_DirectionCheckpoint::~Checkpoint_DirectionCheckpoint() {
  // @@protoc_insertion_point(destructor:Checkpoint.DirectionCheckpoint)
  SharedDtor();
}

void Checkpoint_DirectionCheckpoint::SharedDtor() {
}

void Checkpoint_DirectionCheckpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Checkpoint_DirectionCheckpoint& Checkpoint_DirectionCheckpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Checkpoint_DirectionCheckpoint_common_2eproto.base);
  return *internal_default_instance();
}


void Checkpoint_DirectionCheckpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Checkpoint.DirectionCheckpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  direction_to_sequence_.Clear();
  _internal_metadata_.Clear();
}

const char* Checkpoint_DirectionCheckpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, int64> direction_to_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&direction_to_sequence_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Checkpoint_DirectionCheckpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Checkpoint.DirectionCheckpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, int64> direction_to_sequence = 1;
  if (!this->_internal_direction_to_sequence().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_direction_to_sequence().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_direction_to_sequence().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_direction_to_sequence().begin();
          it != this->_internal_direction_to_sequence().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_direction_to_sequence().begin();
          it != this->_internal_direction_to_sequence().end(); ++it) {
        target = Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Checkpoint.DirectionCheckpoint)
  return target;
}

size_t Checkpoint_DirectionCheckpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Checkpoint.DirectionCheckpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int64> direction_to_sequence = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_direction_to_sequence_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_direction_to_sequence().begin();
      it != this->_internal_direction_to_sequence().end(); ++it) {
    total_size += Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Checkpoint_DirectionCheckpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Checkpoint.DirectionCheckpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Checkpoint_DirectionCheckpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Checkpoint_DirectionCheckpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Checkpoint.DirectionCheckpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Checkpoint.DirectionCheckpoint)
    MergeFrom(*source);
  }
}

void Checkpoint_DirectionCheckpoint::MergeFrom(const Checkpoint_DirectionCheckpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Checkpoint.DirectionCheckpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  direction_to_sequence_.MergeFrom(from.direction_to_sequence_);
}

void Checkpoint_DirectionCheckpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Checkpoint.DirectionCheckpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Checkpoint_DirectionCheckpoint::CopyFrom(const Checkpoint_DirectionCheckpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Checkpoint.DirectionCheckpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Checkpoint_DirectionCheckpoint::IsInitialized() const {
  return true;
}

void Checkpoint_DirectionCheckpoint::InternalSwap(Checkpoint_DirectionCheckpoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  direction_to_sequence_.Swap(&other->direction_to_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Checkpoint_DirectionCheckpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Checkpoint::InitAsDefaultInstance() {
}
class Checkpoint::_Internal {
 public:
};

Checkpoint::Checkpoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Checkpoint)
}
Checkpoint::Checkpoint(const Checkpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_alias_to_direction_checkpoint_.MergeFrom(from.session_alias_to_direction_checkpoint_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:Checkpoint)
}

void Checkpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Checkpoint_common_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Checkpoint::~Checkpoint() {
  // @@protoc_insertion_point(destructor:Checkpoint)
  SharedDtor();
}

void Checkpoint::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Checkpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Checkpoint& Checkpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Checkpoint_common_2eproto.base);
  return *internal_default_instance();
}


void Checkpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_alias_to_direction_checkpoint_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Checkpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Checkpoint.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .Checkpoint.DirectionCheckpoint> session_alias_to_direction_checkpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&session_alias_to_direction_checkpoint_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Checkpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Checkpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Checkpoint.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, .Checkpoint.DirectionCheckpoint> session_alias_to_direction_checkpoint = 2;
  if (!this->_internal_session_alias_to_direction_checkpoint().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "Checkpoint.SessionAliasToDirectionCheckpointEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_session_alias_to_direction_checkpoint().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_session_alias_to_direction_checkpoint().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >::const_iterator
          it = this->_internal_session_alias_to_direction_checkpoint().begin();
          it != this->_internal_session_alias_to_direction_checkpoint().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >::const_iterator
          it = this->_internal_session_alias_to_direction_checkpoint().begin();
          it != this->_internal_session_alias_to_direction_checkpoint().end(); ++it) {
        target = Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Checkpoint)
  return target;
}

size_t Checkpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Checkpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .Checkpoint.DirectionCheckpoint> session_alias_to_direction_checkpoint = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_session_alias_to_direction_checkpoint_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >::const_iterator
      it = this->_internal_session_alias_to_direction_checkpoint().begin();
      it != this->_internal_session_alias_to_direction_checkpoint().end(); ++it) {
    total_size += Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Checkpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Checkpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Checkpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Checkpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Checkpoint)
    MergeFrom(*source);
  }
}

void Checkpoint::MergeFrom(const Checkpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Checkpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  session_alias_to_direction_checkpoint_.MergeFrom(from.session_alias_to_direction_checkpoint_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void Checkpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Checkpoint::CopyFrom(const Checkpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Checkpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Checkpoint::IsInitialized() const {
  return true;
}

void Checkpoint::InternalSwap(Checkpoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  session_alias_to_direction_checkpoint_.Swap(&other->session_alias_to_direction_checkpoint_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Checkpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventID::InitAsDefaultInstance() {
}
class EventID::_Internal {
 public:
};

EventID::EventID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EventID)
}
EventID::EventID(const EventID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:EventID)
}

void EventID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventID_common_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EventID::~EventID() {
  // @@protoc_insertion_point(destructor:EventID)
  SharedDtor();
}

void EventID::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventID& EventID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventID_common_2eproto.base);
  return *internal_default_instance();
}


void EventID::Clear() {
// @@protoc_insertion_point(message_clear_start:EventID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EventID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EventID.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EventID.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventID)
  return target;
}

size_t EventID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EventID)
  GOOGLE_DCHECK_NE(&from, this);
  const EventID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EventID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EventID)
    MergeFrom(*source);
  }
}

void EventID::MergeFrom(const EventID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void EventID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EventID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventID::CopyFrom(const EventID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventID::IsInitialized() const {
  return true;
}

void EventID::InternalSwap(EventID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EventID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::_Event_default_instance_._instance.get_mutable()->id_ = const_cast< ::EventID*>(
      ::EventID::internal_default_instance());
  ::_Event_default_instance_._instance.get_mutable()->parent_id_ = const_cast< ::EventID*>(
      ::EventID::internal_default_instance());
  ::_Event_default_instance_._instance.get_mutable()->start_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::_Event_default_instance_._instance.get_mutable()->end_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Event::_Internal {
 public:
  static const ::EventID& id(const Event* msg);
  static const ::EventID& parent_id(const Event* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp(const Event* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_timestamp(const Event* msg);
};

const ::EventID&
Event::_Internal::id(const Event* msg) {
  return *msg->id_;
}
const ::EventID&
Event::_Internal::parent_id(const Event* msg) {
  return *msg->parent_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::start_timestamp(const Event* msg) {
  return *msg->start_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Event::_Internal::end_timestamp(const Event* msg) {
  return *msg->end_timestamp_;
}
void Event::clear_start_timestamp() {
  if (GetArenaNoVirtual() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
}
void Event::clear_end_timestamp() {
  if (GetArenaNoVirtual() == nullptr && end_timestamp_ != nullptr) {
    delete end_timestamp_;
  }
  end_timestamp_ = nullptr;
}
Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      attached_message_ids_(from.attached_message_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from._internal_has_id()) {
    id_ = new ::EventID(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_parent_id()) {
    parent_id_ = new ::EventID(*from.parent_id_);
  } else {
    parent_id_ = nullptr;
  }
  if (from._internal_has_start_timestamp()) {
    start_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_timestamp_);
  } else {
    start_timestamp_ = nullptr;
  }
  if (from._internal_has_end_timestamp()) {
    end_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_timestamp_);
  } else {
    end_timestamp_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_common_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&id_)) + sizeof(status_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:Event)
  SharedDtor();
}

void Event::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete parent_id_;
  if (this != internal_default_instance()) delete start_timestamp_;
  if (this != internal_default_instance()) delete end_timestamp_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_common_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attached_message_ids_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parent_id_ != nullptr) {
    delete parent_id_;
  }
  parent_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && start_timestamp_ != nullptr) {
    delete start_timestamp_;
  }
  start_timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_timestamp_ != nullptr) {
    delete end_timestamp_;
  }
  end_timestamp_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .EventID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EventID parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EventStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::EventStatus>(val));
        } else goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Event.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Event.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MessageID attached_message_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attached_message_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventID id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // .EventID parent_id = 2;
  if (this->has_parent_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent_id(this), target, stream);
  }

  // .google.protobuf.Timestamp start_timestamp = 3;
  if (this->has_start_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::start_timestamp(this), target, stream);
  }

  // .google.protobuf.Timestamp end_timestamp = 4;
  if (this->has_end_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::end_timestamp(this), target, stream);
  }

  // .EventStatus status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Event.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // string type = 7;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Event.type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_type(), target);
  }

  // bytes body = 8;
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_body(), target);
  }

  // repeated .MessageID attached_message_ids = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attached_message_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_attached_message_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MessageID attached_message_ids = 9;
  total_size += 1UL * this->_internal_attached_message_ids_size();
  for (const auto& msg : this->attached_message_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 7;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes body = 8;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // .EventID id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .EventID parent_id = 2;
  if (this->has_parent_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_id_);
  }

  // .google.protobuf.Timestamp start_timestamp = 3;
  if (this->has_start_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_timestamp_);
  }

  // .google.protobuf.Timestamp end_timestamp = 4;
  if (this->has_end_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_timestamp_);
  }

  // .EventStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attached_message_ids_.MergeFrom(from.attached_message_ids_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::EventID::MergeFrom(from._internal_id());
  }
  if (from.has_parent_id()) {
    _internal_mutable_parent_id()->::EventID::MergeFrom(from._internal_parent_id());
  }
  if (from.has_start_timestamp()) {
    _internal_mutable_start_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_timestamp());
  }
  if (from.has_end_timestamp()) {
    _internal_mutable_end_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attached_message_ids_.InternalSwap(&other->attached_message_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventBatch::InitAsDefaultInstance() {
  ::_EventBatch_default_instance_._instance.get_mutable()->parent_event_id_ = const_cast< ::EventID*>(
      ::EventID::internal_default_instance());
}
class EventBatch::_Internal {
 public:
  static const ::EventID& parent_event_id(const EventBatch* msg);
};

const ::EventID&
EventBatch::_Internal::parent_event_id(const EventBatch* msg) {
  return *msg->parent_event_id_;
}
EventBatch::EventBatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EventBatch)
}
EventBatch::EventBatch(const EventBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_parent_event_id()) {
    parent_event_id_ = new ::EventID(*from.parent_event_id_);
  } else {
    parent_event_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:EventBatch)
}

void EventBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventBatch_common_2eproto.base);
  parent_event_id_ = nullptr;
}

EventBatch::~EventBatch() {
  // @@protoc_insertion_point(destructor:EventBatch)
  SharedDtor();
}

void EventBatch::SharedDtor() {
  if (this != internal_default_instance()) delete parent_event_id_;
}

void EventBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventBatch& EventBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventBatch_common_2eproto.base);
  return *internal_default_instance();
}


void EventBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:EventBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  if (GetArenaNoVirtual() == nullptr && parent_event_id_ != nullptr) {
    delete parent_event_id_;
  }
  parent_event_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* EventBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .EventID parent_event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_event_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Event events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventBatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EventBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EventID parent_event_id = 1;
  if (this->has_parent_event_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parent_event_id(this), target, stream);
  }

  // repeated .Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventBatch)
  return target;
}

size_t EventBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventBatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Event events = 2;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .EventID parent_event_id = 1;
  if (this->has_parent_event_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_event_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventBatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EventBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const EventBatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventBatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EventBatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EventBatch)
    MergeFrom(*source);
  }
}

void EventBatch::MergeFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.has_parent_event_id()) {
    _internal_mutable_parent_event_id()->::EventID::MergeFrom(from._internal_parent_event_id());
  }
}

void EventBatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBatch::CopyFrom(const EventBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBatch::IsInitialized() const {
  return true;
}

void EventBatch::InternalSwap(EventBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
  swap(parent_event_id_, other->parent_event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBatch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ConnectionID* Arena::CreateMaybeMessage< ::ConnectionID >(Arena* arena) {
  return Arena::CreateInternal< ::ConnectionID >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageID* Arena::CreateMaybeMessage< ::MessageID >(Arena* arena) {
  return Arena::CreateInternal< ::MessageID >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageMetadata_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::MessageMetadata_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::MessageMetadata_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageMetadata* Arena::CreateMaybeMessage< ::MessageMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::MessageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::RawMessageMetadata_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::RawMessageMetadata_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::RawMessageMetadata_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::RawMessageMetadata* Arena::CreateMaybeMessage< ::RawMessageMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::RawMessageMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::Value* Arena::CreateMaybeMessage< ::Value >(Arena* arena) {
  return Arena::CreateInternal< ::Value >(arena);
}
template<> PROTOBUF_NOINLINE ::ListValue* Arena::CreateMaybeMessage< ::ListValue >(Arena* arena) {
  return Arena::CreateInternal< ::ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::Message_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Message_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Message_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateInternal< ::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::RawMessage* Arena::CreateMaybeMessage< ::RawMessage >(Arena* arena) {
  return Arena::CreateInternal< ::RawMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::AnyMessage* Arena::CreateMaybeMessage< ::AnyMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AnyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageGroup* Arena::CreateMaybeMessage< ::MessageGroup >(Arena* arena) {
  return Arena::CreateInternal< ::MessageGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageBatch* Arena::CreateMaybeMessage< ::MessageBatch >(Arena* arena) {
  return Arena::CreateInternal< ::MessageBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::RawMessageBatch* Arena::CreateMaybeMessage< ::RawMessageBatch >(Arena* arena) {
  return Arena::CreateInternal< ::RawMessageBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageGroupBatch* Arena::CreateMaybeMessage< ::MessageGroupBatch >(Arena* arena) {
  return Arena::CreateInternal< ::MessageGroupBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestStatus* Arena::CreateMaybeMessage< ::RequestStatus >(Arena* arena) {
  return Arena::CreateInternal< ::RequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ComparisonSettings* Arena::CreateMaybeMessage< ::ComparisonSettings >(Arena* arena) {
  return Arena::CreateInternal< ::ComparisonSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::ValueFilter* Arena::CreateMaybeMessage< ::ValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::ValueFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::ListValueFilter* Arena::CreateMaybeMessage< ::ListValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::ListValueFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageFilter_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::MessageFilter_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::MessageFilter_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageFilter* Arena::CreateMaybeMessage< ::MessageFilter >(Arena* arena) {
  return Arena::CreateInternal< ::MessageFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse* Arena::CreateMaybeMessage< ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse* Arena::CreateMaybeMessage< ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Checkpoint_DirectionCheckpoint* Arena::CreateMaybeMessage< ::Checkpoint_DirectionCheckpoint >(Arena* arena) {
  return Arena::CreateInternal< ::Checkpoint_DirectionCheckpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::Checkpoint* Arena::CreateMaybeMessage< ::Checkpoint >(Arena* arena) {
  return Arena::CreateInternal< ::Checkpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::EventID* Arena::CreateMaybeMessage< ::EventID >(Arena* arena) {
  return Arena::CreateInternal< ::EventID >(arena);
}
template<> PROTOBUF_NOINLINE ::Event* Arena::CreateMaybeMessage< ::Event >(Arena* arena) {
  return Arena::CreateInternal< ::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::EventBatch* Arena::CreateMaybeMessage< ::EventBatch >(Arena* arena) {
  return Arena::CreateInternal< ::EventBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
