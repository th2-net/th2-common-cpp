// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
class Checkpoint;
class CheckpointDefaultTypeInternal;
extern CheckpointDefaultTypeInternal _Checkpoint_default_instance_;
class Checkpoint_DirectionCheckpoint;
class Checkpoint_DirectionCheckpointDefaultTypeInternal;
extern Checkpoint_DirectionCheckpointDefaultTypeInternal _Checkpoint_DirectionCheckpoint_default_instance_;
class Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse;
class Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUseDefaultTypeInternal;
extern Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUseDefaultTypeInternal _Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_default_instance_;
class Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse;
class Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUseDefaultTypeInternal;
extern Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUseDefaultTypeInternal _Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_default_instance_;
class ComparisonSettings;
class ComparisonSettingsDefaultTypeInternal;
extern ComparisonSettingsDefaultTypeInternal _ComparisonSettings_default_instance_;
class ConnectionID;
class ConnectionIDDefaultTypeInternal;
extern ConnectionIDDefaultTypeInternal _ConnectionID_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventBatch;
class EventBatchDefaultTypeInternal;
extern EventBatchDefaultTypeInternal _EventBatch_default_instance_;
class EventID;
class EventIDDefaultTypeInternal;
extern EventIDDefaultTypeInternal _EventID_default_instance_;
class ListValue;
class ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class ListValueFilter;
class ListValueFilterDefaultTypeInternal;
extern ListValueFilterDefaultTypeInternal _ListValueFilter_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageBatch;
class MessageBatchDefaultTypeInternal;
extern MessageBatchDefaultTypeInternal _MessageBatch_default_instance_;
class MessageFilter;
class MessageFilterDefaultTypeInternal;
extern MessageFilterDefaultTypeInternal _MessageFilter_default_instance_;
class MessageFilter_FieldsEntry_DoNotUse;
class MessageFilter_FieldsEntry_DoNotUseDefaultTypeInternal;
extern MessageFilter_FieldsEntry_DoNotUseDefaultTypeInternal _MessageFilter_FieldsEntry_DoNotUse_default_instance_;
class MessageID;
class MessageIDDefaultTypeInternal;
extern MessageIDDefaultTypeInternal _MessageID_default_instance_;
class MessageMetadata;
class MessageMetadataDefaultTypeInternal;
extern MessageMetadataDefaultTypeInternal _MessageMetadata_default_instance_;
class MessageMetadata_PropertiesEntry_DoNotUse;
class MessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern MessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal _MessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
class Message_FieldsEntry_DoNotUse;
class Message_FieldsEntry_DoNotUseDefaultTypeInternal;
extern Message_FieldsEntry_DoNotUseDefaultTypeInternal _Message_FieldsEntry_DoNotUse_default_instance_;
class RawMessage;
class RawMessageDefaultTypeInternal;
extern RawMessageDefaultTypeInternal _RawMessage_default_instance_;
class RawMessageBatch;
class RawMessageBatchDefaultTypeInternal;
extern RawMessageBatchDefaultTypeInternal _RawMessageBatch_default_instance_;
class RawMessageMetadata;
class RawMessageMetadataDefaultTypeInternal;
extern RawMessageMetadataDefaultTypeInternal _RawMessageMetadata_default_instance_;
class RawMessageMetadata_PropertiesEntry_DoNotUse;
class RawMessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern RawMessageMetadata_PropertiesEntry_DoNotUseDefaultTypeInternal _RawMessageMetadata_PropertiesEntry_DoNotUse_default_instance_;
class RequestStatus;
class RequestStatusDefaultTypeInternal;
extern RequestStatusDefaultTypeInternal _RequestStatus_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ValueFilter;
class ValueFilterDefaultTypeInternal;
extern ValueFilterDefaultTypeInternal _ValueFilter_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Checkpoint* Arena::CreateMaybeMessage<::Checkpoint>(Arena*);
template<> ::Checkpoint_DirectionCheckpoint* Arena::CreateMaybeMessage<::Checkpoint_DirectionCheckpoint>(Arena*);
template<> ::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse* Arena::CreateMaybeMessage<::Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse>(Arena*);
template<> ::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse* Arena::CreateMaybeMessage<::Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse>(Arena*);
template<> ::ComparisonSettings* Arena::CreateMaybeMessage<::ComparisonSettings>(Arena*);
template<> ::ConnectionID* Arena::CreateMaybeMessage<::ConnectionID>(Arena*);
template<> ::Event* Arena::CreateMaybeMessage<::Event>(Arena*);
template<> ::EventBatch* Arena::CreateMaybeMessage<::EventBatch>(Arena*);
template<> ::EventID* Arena::CreateMaybeMessage<::EventID>(Arena*);
template<> ::ListValue* Arena::CreateMaybeMessage<::ListValue>(Arena*);
template<> ::ListValueFilter* Arena::CreateMaybeMessage<::ListValueFilter>(Arena*);
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::MessageBatch* Arena::CreateMaybeMessage<::MessageBatch>(Arena*);
template<> ::MessageFilter* Arena::CreateMaybeMessage<::MessageFilter>(Arena*);
template<> ::MessageFilter_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::MessageFilter_FieldsEntry_DoNotUse>(Arena*);
template<> ::MessageID* Arena::CreateMaybeMessage<::MessageID>(Arena*);
template<> ::MessageMetadata* Arena::CreateMaybeMessage<::MessageMetadata>(Arena*);
template<> ::MessageMetadata_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::MessageMetadata_PropertiesEntry_DoNotUse>(Arena*);
template<> ::Message_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::Message_FieldsEntry_DoNotUse>(Arena*);
template<> ::RawMessage* Arena::CreateMaybeMessage<::RawMessage>(Arena*);
template<> ::RawMessageBatch* Arena::CreateMaybeMessage<::RawMessageBatch>(Arena*);
template<> ::RawMessageMetadata* Arena::CreateMaybeMessage<::RawMessageMetadata>(Arena*);
template<> ::RawMessageMetadata_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::RawMessageMetadata_PropertiesEntry_DoNotUse>(Arena*);
template<> ::RequestStatus* Arena::CreateMaybeMessage<::RequestStatus>(Arena*);
template<> ::Value* Arena::CreateMaybeMessage<::Value>(Arena*);
template<> ::ValueFilter* Arena::CreateMaybeMessage<::ValueFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RequestStatus_Status : int {
  RequestStatus_Status_SUCCESS = 0,
  RequestStatus_Status_ERROR = 1,
  RequestStatus_Status_RequestStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RequestStatus_Status_RequestStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RequestStatus_Status_IsValid(int value);
constexpr RequestStatus_Status RequestStatus_Status_Status_MIN = RequestStatus_Status_SUCCESS;
constexpr RequestStatus_Status RequestStatus_Status_Status_MAX = RequestStatus_Status_ERROR;
constexpr int RequestStatus_Status_Status_ARRAYSIZE = RequestStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RequestStatus_Status_descriptor();
template<typename T>
inline const std::string& RequestStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RequestStatus_Status_descriptor(), enum_t_value);
}
inline bool RequestStatus_Status_Parse(
    const std::string& name, RequestStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RequestStatus_Status>(
    RequestStatus_Status_descriptor(), name, value);
}
enum Direction : int {
  FIRST = 0,
  SECOND = 1,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = FIRST;
constexpr Direction Direction_MAX = SECOND;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    const std::string& name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
enum NullValue : int {
  NULL_VALUE = 0,
  NullValue_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NullValue_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NullValue_IsValid(int value);
constexpr NullValue NullValue_MIN = NULL_VALUE;
constexpr NullValue NullValue_MAX = NULL_VALUE;
constexpr int NullValue_ARRAYSIZE = NullValue_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NullValue_descriptor();
template<typename T>
inline const std::string& NullValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NullValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NullValue_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NullValue_descriptor(), enum_t_value);
}
inline bool NullValue_Parse(
    const std::string& name, NullValue* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NullValue>(
    NullValue_descriptor(), name, value);
}
enum FailUnexpected : int {
  NO = 0,
  FIELDS = 1,
  FIELDS_AND_MESSAGES = 2,
  FailUnexpected_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FailUnexpected_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FailUnexpected_IsValid(int value);
constexpr FailUnexpected FailUnexpected_MIN = NO;
constexpr FailUnexpected FailUnexpected_MAX = FIELDS_AND_MESSAGES;
constexpr int FailUnexpected_ARRAYSIZE = FailUnexpected_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailUnexpected_descriptor();
template<typename T>
inline const std::string& FailUnexpected_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FailUnexpected>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FailUnexpected_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FailUnexpected_descriptor(), enum_t_value);
}
inline bool FailUnexpected_Parse(
    const std::string& name, FailUnexpected* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FailUnexpected>(
    FailUnexpected_descriptor(), name, value);
}
enum FilterOperation : int {
  EQUAL = 0,
  NOT_EQUAL = 1,
  EMPTY = 2,
  NOT_EMPTY = 3,
  FilterOperation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FilterOperation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FilterOperation_IsValid(int value);
constexpr FilterOperation FilterOperation_MIN = EQUAL;
constexpr FilterOperation FilterOperation_MAX = NOT_EMPTY;
constexpr int FilterOperation_ARRAYSIZE = FilterOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterOperation_descriptor();
template<typename T>
inline const std::string& FilterOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilterOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilterOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilterOperation_descriptor(), enum_t_value);
}
inline bool FilterOperation_Parse(
    const std::string& name, FilterOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilterOperation>(
    FilterOperation_descriptor(), name, value);
}
enum EventStatus : int {
  SUCCESS = 0,
  FAILED = 1,
  EventStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EventStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EventStatus_IsValid(int value);
constexpr EventStatus EventStatus_MIN = SUCCESS;
constexpr EventStatus EventStatus_MAX = FAILED;
constexpr int EventStatus_ARRAYSIZE = EventStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventStatus_descriptor();
template<typename T>
inline const std::string& EventStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventStatus_descriptor(), enum_t_value);
}
inline bool EventStatus_Parse(
    const std::string& name, EventStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventStatus>(
    EventStatus_descriptor(), name, value);
}
// ===================================================================

class ConnectionID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectionID) */ {
 public:
  ConnectionID();
  virtual ~ConnectionID();

  ConnectionID(const ConnectionID& from);
  ConnectionID(ConnectionID&& from) noexcept
    : ConnectionID() {
    *this = ::std::move(from);
  }

  inline ConnectionID& operator=(const ConnectionID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionID& operator=(ConnectionID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectionID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionID* internal_default_instance() {
    return reinterpret_cast<const ConnectionID*>(
               &_ConnectionID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionID& a, ConnectionID& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectionID* New() const final {
    return CreateMaybeMessage<ConnectionID>(nullptr);
  }

  ConnectionID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectionID& from);
  void MergeFrom(const ConnectionID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectionID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionAliasFieldNumber = 1,
  };
  // string session_alias = 1;
  void clear_session_alias();
  const std::string& session_alias() const;
  void set_session_alias(const std::string& value);
  void set_session_alias(std::string&& value);
  void set_session_alias(const char* value);
  void set_session_alias(const char* value, size_t size);
  std::string* mutable_session_alias();
  std::string* release_session_alias();
  void set_allocated_session_alias(std::string* session_alias);
  private:
  const std::string& _internal_session_alias() const;
  void _internal_set_session_alias(const std::string& value);
  std::string* _internal_mutable_session_alias();
  public:

  // @@protoc_insertion_point(class_scope:ConnectionID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MessageID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageID) */ {
 public:
  MessageID();
  virtual ~MessageID();

  MessageID(const MessageID& from);
  MessageID(MessageID&& from) noexcept
    : MessageID() {
    *this = ::std::move(from);
  }

  inline MessageID& operator=(const MessageID& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageID& operator=(MessageID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageID* internal_default_instance() {
    return reinterpret_cast<const MessageID*>(
               &_MessageID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageID& a, MessageID& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageID* New() const final {
    return CreateMaybeMessage<MessageID>(nullptr);
  }

  MessageID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageID& from);
  void MergeFrom(const MessageID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kSequenceFieldNumber = 3,
    kDirectionFieldNumber = 2,
  };
  // .ConnectionID connection_id = 1;
  bool has_connection_id() const;
  private:
  bool _internal_has_connection_id() const;
  public:
  void clear_connection_id();
  const ::ConnectionID& connection_id() const;
  ::ConnectionID* release_connection_id();
  ::ConnectionID* mutable_connection_id();
  void set_allocated_connection_id(::ConnectionID* connection_id);
  private:
  const ::ConnectionID& _internal_connection_id() const;
  ::ConnectionID* _internal_mutable_connection_id();
  public:

  // int64 sequence = 3;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Direction direction = 2;
  void clear_direction();
  ::Direction direction() const;
  void set_direction(::Direction value);
  private:
  ::Direction _internal_direction() const;
  void _internal_set_direction(::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:MessageID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ConnectionID* connection_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MessageMetadata_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageMetadata_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageMetadata_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MessageMetadata_PropertiesEntry_DoNotUse();
  MessageMetadata_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MessageMetadata_PropertiesEntry_DoNotUse& other);
  static const MessageMetadata_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MessageMetadata_PropertiesEntry_DoNotUse*>(&_MessageMetadata_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MessageMetadata.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MessageMetadata.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class MessageMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageMetadata) */ {
 public:
  MessageMetadata();
  virtual ~MessageMetadata();

  MessageMetadata(const MessageMetadata& from);
  MessageMetadata(MessageMetadata&& from) noexcept
    : MessageMetadata() {
    *this = ::std::move(from);
  }

  inline MessageMetadata& operator=(const MessageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageMetadata& operator=(MessageMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageMetadata* internal_default_instance() {
    return reinterpret_cast<const MessageMetadata*>(
               &_MessageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageMetadata& a, MessageMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageMetadata* New() const final {
    return CreateMaybeMessage<MessageMetadata>(nullptr);
  }

  MessageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageMetadata& from);
  void MergeFrom(const MessageMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 4,
    kMessageTypeFieldNumber = 3,
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // map<string, string> properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string message_type = 3;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // .MessageID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::MessageID& id() const;
  ::MessageID* release_id();
  ::MessageID* mutable_id();
  void set_allocated_id(::MessageID* id);
  private:
  const ::MessageID& _internal_id() const;
  ::MessageID* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:MessageMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MessageMetadata_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::MessageID* id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RawMessageMetadata_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RawMessageMetadata_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RawMessageMetadata_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RawMessageMetadata_PropertiesEntry_DoNotUse();
  RawMessageMetadata_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RawMessageMetadata_PropertiesEntry_DoNotUse& other);
  static const RawMessageMetadata_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RawMessageMetadata_PropertiesEntry_DoNotUse*>(&_RawMessageMetadata_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RawMessageMetadata.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "RawMessageMetadata.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class RawMessageMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawMessageMetadata) */ {
 public:
  RawMessageMetadata();
  virtual ~RawMessageMetadata();

  RawMessageMetadata(const RawMessageMetadata& from);
  RawMessageMetadata(RawMessageMetadata&& from) noexcept
    : RawMessageMetadata() {
    *this = ::std::move(from);
  }

  inline RawMessageMetadata& operator=(const RawMessageMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawMessageMetadata& operator=(RawMessageMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawMessageMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawMessageMetadata* internal_default_instance() {
    return reinterpret_cast<const RawMessageMetadata*>(
               &_RawMessageMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RawMessageMetadata& a, RawMessageMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RawMessageMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawMessageMetadata* New() const final {
    return CreateMaybeMessage<RawMessageMetadata>(nullptr);
  }

  RawMessageMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawMessageMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawMessageMetadata& from);
  void MergeFrom(const RawMessageMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawMessageMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawMessageMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // map<string, string> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // .MessageID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::MessageID& id() const;
  ::MessageID* release_id();
  ::MessageID* mutable_id();
  void set_allocated_id(::MessageID* id);
  private:
  const ::MessageID& _internal_id() const;
  ::MessageID* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // @@protoc_insertion_point(class_scope:RawMessageMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      RawMessageMetadata_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::MessageID* id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum KindCase {
    kNullValue = 1,
    kSimpleValue = 2,
    kMessageValue = 3,
    kListValue = 4,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullValueFieldNumber = 1,
    kSimpleValueFieldNumber = 2,
    kMessageValueFieldNumber = 3,
    kListValueFieldNumber = 4,
  };
  // .NullValue null_value = 1;
  private:
  bool _internal_has_null_value() const;
  public:
  void clear_null_value();
  ::NullValue null_value() const;
  void set_null_value(::NullValue value);
  private:
  ::NullValue _internal_null_value() const;
  void _internal_set_null_value(::NullValue value);
  public:

  // string simple_value = 2;
  private:
  bool _internal_has_simple_value() const;
  public:
  void clear_simple_value();
  const std::string& simple_value() const;
  void set_simple_value(const std::string& value);
  void set_simple_value(std::string&& value);
  void set_simple_value(const char* value);
  void set_simple_value(const char* value, size_t size);
  std::string* mutable_simple_value();
  std::string* release_simple_value();
  void set_allocated_simple_value(std::string* simple_value);
  private:
  const std::string& _internal_simple_value() const;
  void _internal_set_simple_value(const std::string& value);
  std::string* _internal_mutable_simple_value();
  public:

  // .Message message_value = 3;
  bool has_message_value() const;
  private:
  bool _internal_has_message_value() const;
  public:
  void clear_message_value();
  const ::Message& message_value() const;
  ::Message* release_message_value();
  ::Message* mutable_message_value();
  void set_allocated_message_value(::Message* message_value);
  private:
  const ::Message& _internal_message_value() const;
  ::Message* _internal_mutable_message_value();
  public:

  // .ListValue list_value = 4;
  bool has_list_value() const;
  private:
  bool _internal_has_list_value() const;
  public:
  void clear_list_value();
  const ::ListValue& list_value() const;
  ::ListValue* release_list_value();
  ::ListValue* mutable_list_value();
  void set_allocated_list_value(::ListValue* list_value);
  private:
  const ::ListValue& _internal_list_value() const;
  ::ListValue* _internal_mutable_list_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:Value)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_simple_value();
  void set_has_message_value();
  void set_has_list_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union KindUnion {
    KindUnion() {}
    int null_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simple_value_;
    ::Message* message_value_;
    ::ListValue* list_value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ListValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListValue) */ {
 public:
  ListValue();
  virtual ~ListValue();

  ListValue(const ListValue& from);
  ListValue(ListValue&& from) noexcept
    : ListValue() {
    *this = ::std::move(from);
  }

  inline ListValue& operator=(const ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValue& operator=(ListValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListValue* internal_default_instance() {
    return reinterpret_cast<const ListValue*>(
               &_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListValue& a, ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValue* New() const final {
    return CreateMaybeMessage<ListValue>(nullptr);
  }

  ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValue& from);
  void MergeFrom(const ListValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .Value values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >*
      mutable_values();
  private:
  const ::Value& _internal_values(int index) const;
  ::Value* _internal_add_values();
  public:
  const ::Value& values(int index) const;
  ::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:ListValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Message_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_FieldsEntry_DoNotUse, 
    std::string, ::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Message_FieldsEntry_DoNotUse, 
    std::string, ::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Message_FieldsEntry_DoNotUse();
  Message_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Message_FieldsEntry_DoNotUse& other);
  static const Message_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Message_FieldsEntry_DoNotUse*>(&_Message_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Message.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kMetadataFieldNumber = 1,
    kParentEventIdFieldNumber = 3,
  };
  // map<string, .Value> fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >*
      mutable_fields();

  // .MessageMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::MessageMetadata& metadata() const;
  ::MessageMetadata* release_metadata();
  ::MessageMetadata* mutable_metadata();
  void set_allocated_metadata(::MessageMetadata* metadata);
  private:
  const ::MessageMetadata& _internal_metadata() const;
  ::MessageMetadata* _internal_mutable_metadata();
  public:

  // .EventID parent_event_id = 3;
  bool has_parent_event_id() const;
  private:
  bool _internal_has_parent_event_id() const;
  public:
  void clear_parent_event_id();
  const ::EventID& parent_event_id() const;
  ::EventID* release_parent_event_id();
  ::EventID* mutable_parent_event_id();
  void set_allocated_parent_event_id(::EventID* parent_event_id);
  private:
  const ::EventID& _internal_parent_event_id() const;
  ::EventID* _internal_mutable_parent_event_id();
  public:

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Message_FieldsEntry_DoNotUse,
      std::string, ::Value,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  ::MessageMetadata* metadata_;
  ::EventID* parent_event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RawMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawMessage) */ {
 public:
  RawMessage();
  virtual ~RawMessage();

  RawMessage(const RawMessage& from);
  RawMessage(RawMessage&& from) noexcept
    : RawMessage() {
    *this = ::std::move(from);
  }

  inline RawMessage& operator=(const RawMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawMessage& operator=(RawMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawMessage* internal_default_instance() {
    return reinterpret_cast<const RawMessage*>(
               &_RawMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RawMessage& a, RawMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RawMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawMessage* New() const final {
    return CreateMaybeMessage<RawMessage>(nullptr);
  }

  RawMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawMessage& from);
  void MergeFrom(const RawMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kMetadataFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .RawMessageMetadata metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::RawMessageMetadata& metadata() const;
  ::RawMessageMetadata* release_metadata();
  ::RawMessageMetadata* mutable_metadata();
  void set_allocated_metadata(::RawMessageMetadata* metadata);
  private:
  const ::RawMessageMetadata& _internal_metadata() const;
  ::RawMessageMetadata* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:RawMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::RawMessageMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MessageBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageBatch) */ {
 public:
  MessageBatch();
  virtual ~MessageBatch();

  MessageBatch(const MessageBatch& from);
  MessageBatch(MessageBatch&& from) noexcept
    : MessageBatch() {
    *this = ::std::move(from);
  }

  inline MessageBatch& operator=(const MessageBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBatch& operator=(MessageBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBatch* internal_default_instance() {
    return reinterpret_cast<const MessageBatch*>(
               &_MessageBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MessageBatch& a, MessageBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBatch* New() const final {
    return CreateMaybeMessage<MessageBatch>(nullptr);
  }

  MessageBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBatch& from);
  void MergeFrom(const MessageBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .Message messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >*
      mutable_messages();
  private:
  const ::Message& _internal_messages(int index) const;
  ::Message* _internal_add_messages();
  public:
  const ::Message& messages(int index) const;
  ::Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >&
      messages() const;

  // @@protoc_insertion_point(class_scope:MessageBatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RawMessageBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RawMessageBatch) */ {
 public:
  RawMessageBatch();
  virtual ~RawMessageBatch();

  RawMessageBatch(const RawMessageBatch& from);
  RawMessageBatch(RawMessageBatch&& from) noexcept
    : RawMessageBatch() {
    *this = ::std::move(from);
  }

  inline RawMessageBatch& operator=(const RawMessageBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawMessageBatch& operator=(RawMessageBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RawMessageBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawMessageBatch* internal_default_instance() {
    return reinterpret_cast<const RawMessageBatch*>(
               &_RawMessageBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RawMessageBatch& a, RawMessageBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(RawMessageBatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawMessageBatch* New() const final {
    return CreateMaybeMessage<RawMessageBatch>(nullptr);
  }

  RawMessageBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawMessageBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RawMessageBatch& from);
  void MergeFrom(const RawMessageBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawMessageBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RawMessageBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .RawMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::RawMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawMessage >*
      mutable_messages();
  private:
  const ::RawMessage& _internal_messages(int index) const;
  ::RawMessage* _internal_add_messages();
  public:
  const ::RawMessage& messages(int index) const;
  ::RawMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:RawMessageBatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawMessage > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class RequestStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestStatus) */ {
 public:
  RequestStatus();
  virtual ~RequestStatus();

  RequestStatus(const RequestStatus& from);
  RequestStatus(RequestStatus&& from) noexcept
    : RequestStatus() {
    *this = ::std::move(from);
  }

  inline RequestStatus& operator=(const RequestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestStatus& operator=(RequestStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestStatus* internal_default_instance() {
    return reinterpret_cast<const RequestStatus*>(
               &_RequestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RequestStatus& a, RequestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestStatus* New() const final {
    return CreateMaybeMessage<RequestStatus>(nullptr);
  }

  RequestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestStatus& from);
  void MergeFrom(const RequestStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RequestStatus_Status Status;
  static constexpr Status SUCCESS =
    RequestStatus_Status_SUCCESS;
  static constexpr Status ERROR =
    RequestStatus_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return RequestStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RequestStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RequestStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RequestStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RequestStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RequestStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return RequestStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .RequestStatus.Status status = 1;
  void clear_status();
  ::RequestStatus_Status status() const;
  void set_status(::RequestStatus_Status value);
  private:
  ::RequestStatus_Status _internal_status() const;
  void _internal_set_status(::RequestStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:RequestStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ComparisonSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ComparisonSettings) */ {
 public:
  ComparisonSettings();
  virtual ~ComparisonSettings();

  ComparisonSettings(const ComparisonSettings& from);
  ComparisonSettings(ComparisonSettings&& from) noexcept
    : ComparisonSettings() {
    *this = ::std::move(from);
  }

  inline ComparisonSettings& operator=(const ComparisonSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComparisonSettings& operator=(ComparisonSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ComparisonSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComparisonSettings* internal_default_instance() {
    return reinterpret_cast<const ComparisonSettings*>(
               &_ComparisonSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ComparisonSettings& a, ComparisonSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ComparisonSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComparisonSettings* New() const final {
    return CreateMaybeMessage<ComparisonSettings>(nullptr);
  }

  ComparisonSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComparisonSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComparisonSettings& from);
  void MergeFrom(const ComparisonSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComparisonSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ComparisonSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIgnoreFieldsFieldNumber = 1,
    kFailUnexpectedFieldNumber = 2,
  };
  // repeated string ignore_fields = 1;
  int ignore_fields_size() const;
  private:
  int _internal_ignore_fields_size() const;
  public:
  void clear_ignore_fields();
  const std::string& ignore_fields(int index) const;
  std::string* mutable_ignore_fields(int index);
  void set_ignore_fields(int index, const std::string& value);
  void set_ignore_fields(int index, std::string&& value);
  void set_ignore_fields(int index, const char* value);
  void set_ignore_fields(int index, const char* value, size_t size);
  std::string* add_ignore_fields();
  void add_ignore_fields(const std::string& value);
  void add_ignore_fields(std::string&& value);
  void add_ignore_fields(const char* value);
  void add_ignore_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignore_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignore_fields();
  private:
  const std::string& _internal_ignore_fields(int index) const;
  std::string* _internal_add_ignore_fields();
  public:

  // .FailUnexpected fail_unexpected = 2;
  void clear_fail_unexpected();
  ::FailUnexpected fail_unexpected() const;
  void set_fail_unexpected(::FailUnexpected value);
  private:
  ::FailUnexpected _internal_fail_unexpected() const;
  void _internal_set_fail_unexpected(::FailUnexpected value);
  public:

  // @@protoc_insertion_point(class_scope:ComparisonSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignore_fields_;
  int fail_unexpected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ValueFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ValueFilter) */ {
 public:
  ValueFilter();
  virtual ~ValueFilter();

  ValueFilter(const ValueFilter& from);
  ValueFilter(ValueFilter&& from) noexcept
    : ValueFilter() {
    *this = ::std::move(from);
  }

  inline ValueFilter& operator=(const ValueFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueFilter& operator=(ValueFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueFilter& default_instance();

  enum KindCase {
    kSimpleFilter = 3,
    kMessageFilter = 4,
    kListFilter = 5,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueFilter* internal_default_instance() {
    return reinterpret_cast<const ValueFilter*>(
               &_ValueFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ValueFilter& a, ValueFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueFilter* New() const final {
    return CreateMaybeMessage<ValueFilter>(nullptr);
  }

  ValueFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueFilter& from);
  void MergeFrom(const ValueFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ValueFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
    kKeyFieldNumber = 2,
    kSimpleFilterFieldNumber = 3,
    kMessageFilterFieldNumber = 4,
    kListFilterFieldNumber = 5,
  };
  // .FilterOperation operation = 1;
  void clear_operation();
  ::FilterOperation operation() const;
  void set_operation(::FilterOperation value);
  private:
  ::FilterOperation _internal_operation() const;
  void _internal_set_operation(::FilterOperation value);
  public:

  // bool key = 2;
  void clear_key();
  bool key() const;
  void set_key(bool value);
  private:
  bool _internal_key() const;
  void _internal_set_key(bool value);
  public:

  // string simple_filter = 3;
  private:
  bool _internal_has_simple_filter() const;
  public:
  void clear_simple_filter();
  const std::string& simple_filter() const;
  void set_simple_filter(const std::string& value);
  void set_simple_filter(std::string&& value);
  void set_simple_filter(const char* value);
  void set_simple_filter(const char* value, size_t size);
  std::string* mutable_simple_filter();
  std::string* release_simple_filter();
  void set_allocated_simple_filter(std::string* simple_filter);
  private:
  const std::string& _internal_simple_filter() const;
  void _internal_set_simple_filter(const std::string& value);
  std::string* _internal_mutable_simple_filter();
  public:

  // .MessageFilter message_filter = 4;
  bool has_message_filter() const;
  private:
  bool _internal_has_message_filter() const;
  public:
  void clear_message_filter();
  const ::MessageFilter& message_filter() const;
  ::MessageFilter* release_message_filter();
  ::MessageFilter* mutable_message_filter();
  void set_allocated_message_filter(::MessageFilter* message_filter);
  private:
  const ::MessageFilter& _internal_message_filter() const;
  ::MessageFilter* _internal_mutable_message_filter();
  public:

  // .ListValueFilter list_filter = 5;
  bool has_list_filter() const;
  private:
  bool _internal_has_list_filter() const;
  public:
  void clear_list_filter();
  const ::ListValueFilter& list_filter() const;
  ::ListValueFilter* release_list_filter();
  ::ListValueFilter* mutable_list_filter();
  void set_allocated_list_filter(::ListValueFilter* list_filter);
  private:
  const ::ListValueFilter& _internal_list_filter() const;
  ::ListValueFilter* _internal_mutable_list_filter();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:ValueFilter)
 private:
  class _Internal;
  void set_has_simple_filter();
  void set_has_message_filter();
  void set_has_list_filter();

  inline bool has_kind() const;
  inline void clear_has_kind();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int operation_;
  bool key_;
  union KindUnion {
    KindUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simple_filter_;
    ::MessageFilter* message_filter_;
    ::ListValueFilter* list_filter_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ListValueFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ListValueFilter) */ {
 public:
  ListValueFilter();
  virtual ~ListValueFilter();

  ListValueFilter(const ListValueFilter& from);
  ListValueFilter(ListValueFilter&& from) noexcept
    : ListValueFilter() {
    *this = ::std::move(from);
  }

  inline ListValueFilter& operator=(const ListValueFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValueFilter& operator=(ListValueFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValueFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListValueFilter* internal_default_instance() {
    return reinterpret_cast<const ListValueFilter*>(
               &_ListValueFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListValueFilter& a, ListValueFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValueFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValueFilter* New() const final {
    return CreateMaybeMessage<ListValueFilter>(nullptr);
  }

  ListValueFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValueFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValueFilter& from);
  void MergeFrom(const ListValueFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValueFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ListValueFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .ValueFilter values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::ValueFilter* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueFilter >*
      mutable_values();
  private:
  const ::ValueFilter& _internal_values(int index) const;
  ::ValueFilter* _internal_add_values();
  public:
  const ::ValueFilter& values(int index) const;
  ::ValueFilter* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueFilter >&
      values() const;

  // @@protoc_insertion_point(class_scope:ListValueFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueFilter > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class MessageFilter_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageFilter_FieldsEntry_DoNotUse, 
    std::string, ::ValueFilter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MessageFilter_FieldsEntry_DoNotUse, 
    std::string, ::ValueFilter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MessageFilter_FieldsEntry_DoNotUse();
  MessageFilter_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MessageFilter_FieldsEntry_DoNotUse& other);
  static const MessageFilter_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MessageFilter_FieldsEntry_DoNotUse*>(&_MessageFilter_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "MessageFilter.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class MessageFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageFilter) */ {
 public:
  MessageFilter();
  virtual ~MessageFilter();

  MessageFilter(const MessageFilter& from);
  MessageFilter(MessageFilter&& from) noexcept
    : MessageFilter() {
    *this = ::std::move(from);
  }

  inline MessageFilter& operator=(const MessageFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageFilter& operator=(MessageFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageFilter* internal_default_instance() {
    return reinterpret_cast<const MessageFilter*>(
               &_MessageFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MessageFilter& a, MessageFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageFilter* New() const final {
    return CreateMaybeMessage<MessageFilter>(nullptr);
  }

  MessageFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageFilter& from);
  void MergeFrom(const MessageFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kMessageTypeFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kComparisonSettingsFieldNumber = 4,
  };
  // map<string, .ValueFilter> fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >*
      mutable_fields();

  // string messageType = 1;
  void clear_messagetype();
  const std::string& messagetype() const;
  void set_messagetype(const std::string& value);
  void set_messagetype(std::string&& value);
  void set_messagetype(const char* value);
  void set_messagetype(const char* value, size_t size);
  std::string* mutable_messagetype();
  std::string* release_messagetype();
  void set_allocated_messagetype(std::string* messagetype);
  private:
  const std::string& _internal_messagetype() const;
  void _internal_set_messagetype(const std::string& value);
  std::string* _internal_mutable_messagetype();
  public:

  // string direction = 2;
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // .ComparisonSettings comparison_settings = 4;
  bool has_comparison_settings() const;
  private:
  bool _internal_has_comparison_settings() const;
  public:
  void clear_comparison_settings();
  const ::ComparisonSettings& comparison_settings() const;
  ::ComparisonSettings* release_comparison_settings();
  ::ComparisonSettings* mutable_comparison_settings();
  void set_allocated_comparison_settings(::ComparisonSettings* comparison_settings);
  private:
  const ::ComparisonSettings& _internal_comparison_settings() const;
  ::ComparisonSettings* _internal_mutable_comparison_settings();
  public:

  // @@protoc_insertion_point(class_scope:MessageFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MessageFilter_FieldsEntry_DoNotUse,
      std::string, ::ValueFilter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::ComparisonSettings* comparison_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, 
    std::string, ::Checkpoint_DirectionCheckpoint,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse, 
    std::string, ::Checkpoint_DirectionCheckpoint,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse();
  Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse& other);
  static const Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse*>(&_Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Checkpoint.SessionAliasToDirectionCheckpointEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse();
  Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse& other);
  static const Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse*>(&_Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[20];
  }

  public:
};

// -------------------------------------------------------------------

class Checkpoint_DirectionCheckpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Checkpoint.DirectionCheckpoint) */ {
 public:
  Checkpoint_DirectionCheckpoint();
  virtual ~Checkpoint_DirectionCheckpoint();

  Checkpoint_DirectionCheckpoint(const Checkpoint_DirectionCheckpoint& from);
  Checkpoint_DirectionCheckpoint(Checkpoint_DirectionCheckpoint&& from) noexcept
    : Checkpoint_DirectionCheckpoint() {
    *this = ::std::move(from);
  }

  inline Checkpoint_DirectionCheckpoint& operator=(const Checkpoint_DirectionCheckpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checkpoint_DirectionCheckpoint& operator=(Checkpoint_DirectionCheckpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Checkpoint_DirectionCheckpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Checkpoint_DirectionCheckpoint* internal_default_instance() {
    return reinterpret_cast<const Checkpoint_DirectionCheckpoint*>(
               &_Checkpoint_DirectionCheckpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Checkpoint_DirectionCheckpoint& a, Checkpoint_DirectionCheckpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Checkpoint_DirectionCheckpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Checkpoint_DirectionCheckpoint* New() const final {
    return CreateMaybeMessage<Checkpoint_DirectionCheckpoint>(nullptr);
  }

  Checkpoint_DirectionCheckpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Checkpoint_DirectionCheckpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Checkpoint_DirectionCheckpoint& from);
  void MergeFrom(const Checkpoint_DirectionCheckpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checkpoint_DirectionCheckpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Checkpoint.DirectionCheckpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDirectionToSequenceFieldNumber = 1,
  };
  // map<int32, int64> direction_to_sequence = 1;
  int direction_to_sequence_size() const;
  private:
  int _internal_direction_to_sequence_size() const;
  public:
  void clear_direction_to_sequence();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_direction_to_sequence() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_direction_to_sequence();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      direction_to_sequence() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_direction_to_sequence();

  // @@protoc_insertion_point(class_scope:Checkpoint.DirectionCheckpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Checkpoint_DirectionCheckpoint_DirectionToSequenceEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > direction_to_sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Checkpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Checkpoint) */ {
 public:
  Checkpoint();
  virtual ~Checkpoint();

  Checkpoint(const Checkpoint& from);
  Checkpoint(Checkpoint&& from) noexcept
    : Checkpoint() {
    *this = ::std::move(from);
  }

  inline Checkpoint& operator=(const Checkpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checkpoint& operator=(Checkpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Checkpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Checkpoint* internal_default_instance() {
    return reinterpret_cast<const Checkpoint*>(
               &_Checkpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Checkpoint& a, Checkpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Checkpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Checkpoint* New() const final {
    return CreateMaybeMessage<Checkpoint>(nullptr);
  }

  Checkpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Checkpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Checkpoint& from);
  void MergeFrom(const Checkpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checkpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Checkpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Checkpoint_DirectionCheckpoint DirectionCheckpoint;

  // accessors -------------------------------------------------------

  enum : int {
    kSessionAliasToDirectionCheckpointFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, .Checkpoint.DirectionCheckpoint> session_alias_to_direction_checkpoint = 2;
  int session_alias_to_direction_checkpoint_size() const;
  private:
  int _internal_session_alias_to_direction_checkpoint_size() const;
  public:
  void clear_session_alias_to_direction_checkpoint();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >&
      _internal_session_alias_to_direction_checkpoint() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >*
      _internal_mutable_session_alias_to_direction_checkpoint();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >&
      session_alias_to_direction_checkpoint() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >*
      mutable_session_alias_to_direction_checkpoint();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:Checkpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Checkpoint_SessionAliasToDirectionCheckpointEntry_DoNotUse,
      std::string, ::Checkpoint_DirectionCheckpoint,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > session_alias_to_direction_checkpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class EventID :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventID) */ {
 public:
  EventID();
  virtual ~EventID();

  EventID(const EventID& from);
  EventID(EventID&& from) noexcept
    : EventID() {
    *this = ::std::move(from);
  }

  inline EventID& operator=(const EventID& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventID& operator=(EventID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventID* internal_default_instance() {
    return reinterpret_cast<const EventID*>(
               &_EventID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(EventID& a, EventID& b) {
    a.Swap(&b);
  }
  inline void Swap(EventID* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventID* New() const final {
    return CreateMaybeMessage<EventID>(nullptr);
  }

  EventID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventID& from);
  void MergeFrom(const EventID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventID";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:EventID)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Event :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Event";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttachedMessageIdsFieldNumber = 9,
    kNameFieldNumber = 6,
    kTypeFieldNumber = 7,
    kBodyFieldNumber = 8,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kStartTimestampFieldNumber = 3,
    kEndTimestampFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // repeated .MessageID attached_message_ids = 9;
  int attached_message_ids_size() const;
  private:
  int _internal_attached_message_ids_size() const;
  public:
  void clear_attached_message_ids();
  ::MessageID* mutable_attached_message_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageID >*
      mutable_attached_message_ids();
  private:
  const ::MessageID& _internal_attached_message_ids(int index) const;
  ::MessageID* _internal_add_attached_message_ids();
  public:
  const ::MessageID& attached_message_ids(int index) const;
  ::MessageID* add_attached_message_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageID >&
      attached_message_ids() const;

  // string name = 6;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 7;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes body = 8;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .EventID id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::EventID& id() const;
  ::EventID* release_id();
  ::EventID* mutable_id();
  void set_allocated_id(::EventID* id);
  private:
  const ::EventID& _internal_id() const;
  ::EventID* _internal_mutable_id();
  public:

  // .EventID parent_id = 2;
  bool has_parent_id() const;
  private:
  bool _internal_has_parent_id() const;
  public:
  void clear_parent_id();
  const ::EventID& parent_id() const;
  ::EventID* release_parent_id();
  ::EventID* mutable_parent_id();
  void set_allocated_parent_id(::EventID* parent_id);
  private:
  const ::EventID& _internal_parent_id() const;
  ::EventID* _internal_mutable_parent_id();
  public:

  // .google.protobuf.Timestamp start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_timestamp();
  void set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_timestamp();
  public:

  // .google.protobuf.Timestamp end_timestamp = 4;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_timestamp();
  void set_allocated_end_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_timestamp();
  public:

  // .EventStatus status = 5;
  void clear_status();
  ::EventStatus status() const;
  void set_status(::EventStatus value);
  private:
  ::EventStatus _internal_status() const;
  void _internal_set_status(::EventStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Event)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageID > attached_message_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::EventID* id_;
  ::EventID* parent_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class EventBatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EventBatch) */ {
 public:
  EventBatch();
  virtual ~EventBatch();

  EventBatch(const EventBatch& from);
  EventBatch(EventBatch&& from) noexcept
    : EventBatch() {
    *this = ::std::move(from);
  }

  inline EventBatch& operator=(const EventBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBatch& operator=(EventBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventBatch* internal_default_instance() {
    return reinterpret_cast<const EventBatch*>(
               &_EventBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EventBatch& a, EventBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventBatch* New() const final {
    return CreateMaybeMessage<EventBatch>(nullptr);
  }

  EventBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventBatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventBatch& from);
  void MergeFrom(const EventBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EventBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kParentEventIdFieldNumber = 1,
  };
  // repeated .Event events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
      mutable_events();
  private:
  const ::Event& _internal_events(int index) const;
  ::Event* _internal_add_events();
  public:
  const ::Event& events(int index) const;
  ::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
      events() const;

  // .EventID parent_event_id = 1;
  bool has_parent_event_id() const;
  private:
  bool _internal_has_parent_event_id() const;
  public:
  void clear_parent_event_id();
  const ::EventID& parent_event_id() const;
  ::EventID* release_parent_event_id();
  ::EventID* mutable_parent_event_id();
  void set_allocated_parent_event_id(::EventID* parent_event_id);
  private:
  const ::EventID& _internal_parent_event_id() const;
  ::EventID* _internal_mutable_parent_event_id();
  public:

  // @@protoc_insertion_point(class_scope:EventBatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event > events_;
  ::EventID* parent_event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionID

// string session_alias = 1;
inline void ConnectionID::clear_session_alias() {
  session_alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnectionID::session_alias() const {
  // @@protoc_insertion_point(field_get:ConnectionID.session_alias)
  return _internal_session_alias();
}
inline void ConnectionID::set_session_alias(const std::string& value) {
  _internal_set_session_alias(value);
  // @@protoc_insertion_point(field_set:ConnectionID.session_alias)
}
inline std::string* ConnectionID::mutable_session_alias() {
  // @@protoc_insertion_point(field_mutable:ConnectionID.session_alias)
  return _internal_mutable_session_alias();
}
inline const std::string& ConnectionID::_internal_session_alias() const {
  return session_alias_.GetNoArena();
}
inline void ConnectionID::_internal_set_session_alias(const std::string& value) {
  
  session_alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnectionID::set_session_alias(std::string&& value) {
  
  session_alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConnectionID.session_alias)
}
inline void ConnectionID::set_session_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionID.session_alias)
}
inline void ConnectionID::set_session_alias(const char* value, size_t size) {
  
  session_alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionID.session_alias)
}
inline std::string* ConnectionID::_internal_mutable_session_alias() {
  
  return session_alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnectionID::release_session_alias() {
  // @@protoc_insertion_point(field_release:ConnectionID.session_alias)
  
  return session_alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionID::set_allocated_session_alias(std::string* session_alias) {
  if (session_alias != nullptr) {
    
  } else {
    
  }
  session_alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_alias);
  // @@protoc_insertion_point(field_set_allocated:ConnectionID.session_alias)
}

// -------------------------------------------------------------------

// MessageID

// .ConnectionID connection_id = 1;
inline bool MessageID::_internal_has_connection_id() const {
  return this != internal_default_instance() && connection_id_ != nullptr;
}
inline bool MessageID::has_connection_id() const {
  return _internal_has_connection_id();
}
inline void MessageID::clear_connection_id() {
  if (GetArenaNoVirtual() == nullptr && connection_id_ != nullptr) {
    delete connection_id_;
  }
  connection_id_ = nullptr;
}
inline const ::ConnectionID& MessageID::_internal_connection_id() const {
  const ::ConnectionID* p = connection_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ConnectionID*>(
      &::_ConnectionID_default_instance_);
}
inline const ::ConnectionID& MessageID::connection_id() const {
  // @@protoc_insertion_point(field_get:MessageID.connection_id)
  return _internal_connection_id();
}
inline ::ConnectionID* MessageID::release_connection_id() {
  // @@protoc_insertion_point(field_release:MessageID.connection_id)
  
  ::ConnectionID* temp = connection_id_;
  connection_id_ = nullptr;
  return temp;
}
inline ::ConnectionID* MessageID::_internal_mutable_connection_id() {
  
  if (connection_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectionID>(GetArenaNoVirtual());
    connection_id_ = p;
  }
  return connection_id_;
}
inline ::ConnectionID* MessageID::mutable_connection_id() {
  // @@protoc_insertion_point(field_mutable:MessageID.connection_id)
  return _internal_mutable_connection_id();
}
inline void MessageID::set_allocated_connection_id(::ConnectionID* connection_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete connection_id_;
  }
  if (connection_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connection_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_id, submessage_arena);
    }
    
  } else {
    
  }
  connection_id_ = connection_id;
  // @@protoc_insertion_point(field_set_allocated:MessageID.connection_id)
}

// .Direction direction = 2;
inline void MessageID::clear_direction() {
  direction_ = 0;
}
inline ::Direction MessageID::_internal_direction() const {
  return static_cast< ::Direction >(direction_);
}
inline ::Direction MessageID::direction() const {
  // @@protoc_insertion_point(field_get:MessageID.direction)
  return _internal_direction();
}
inline void MessageID::_internal_set_direction(::Direction value) {
  
  direction_ = value;
}
inline void MessageID::set_direction(::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:MessageID.direction)
}

// int64 sequence = 3;
inline void MessageID::clear_sequence() {
  sequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageID::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageID::sequence() const {
  // @@protoc_insertion_point(field_get:MessageID.sequence)
  return _internal_sequence();
}
inline void MessageID::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void MessageID::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:MessageID.sequence)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MessageMetadata

// .MessageID id = 1;
inline bool MessageMetadata::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool MessageMetadata::has_id() const {
  return _internal_has_id();
}
inline void MessageMetadata::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::MessageID& MessageMetadata::_internal_id() const {
  const ::MessageID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageID*>(
      &::_MessageID_default_instance_);
}
inline const ::MessageID& MessageMetadata::id() const {
  // @@protoc_insertion_point(field_get:MessageMetadata.id)
  return _internal_id();
}
inline ::MessageID* MessageMetadata::release_id() {
  // @@protoc_insertion_point(field_release:MessageMetadata.id)
  
  ::MessageID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::MessageID* MessageMetadata::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageID>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::MessageID* MessageMetadata::mutable_id() {
  // @@protoc_insertion_point(field_mutable:MessageMetadata.id)
  return _internal_mutable_id();
}
inline void MessageMetadata::set_allocated_id(::MessageID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:MessageMetadata.id)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool MessageMetadata::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool MessageMetadata::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageMetadata::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:MessageMetadata.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageMetadata::release_timestamp() {
  // @@protoc_insertion_point(field_release:MessageMetadata.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageMetadata::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageMetadata::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:MessageMetadata.timestamp)
  return _internal_mutable_timestamp();
}
inline void MessageMetadata::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:MessageMetadata.timestamp)
}

// string message_type = 3;
inline void MessageMetadata::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageMetadata::message_type() const {
  // @@protoc_insertion_point(field_get:MessageMetadata.message_type)
  return _internal_message_type();
}
inline void MessageMetadata::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:MessageMetadata.message_type)
}
inline std::string* MessageMetadata::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:MessageMetadata.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& MessageMetadata::_internal_message_type() const {
  return message_type_.GetNoArena();
}
inline void MessageMetadata::_internal_set_message_type(const std::string& value) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageMetadata::set_message_type(std::string&& value) {
  
  message_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageMetadata.message_type)
}
inline void MessageMetadata::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageMetadata.message_type)
}
inline void MessageMetadata::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageMetadata.message_type)
}
inline std::string* MessageMetadata::_internal_mutable_message_type() {
  
  return message_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageMetadata::release_message_type() {
  // @@protoc_insertion_point(field_release:MessageMetadata.message_type)
  
  return message_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageMetadata::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:MessageMetadata.message_type)
}

// map<string, string> properties = 4;
inline int MessageMetadata::_internal_properties_size() const {
  return properties_.size();
}
inline int MessageMetadata::properties_size() const {
  return _internal_properties_size();
}
inline void MessageMetadata::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MessageMetadata::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
MessageMetadata::properties() const {
  // @@protoc_insertion_point(field_map:MessageMetadata.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MessageMetadata::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
MessageMetadata::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:MessageMetadata.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RawMessageMetadata

// .MessageID id = 1;
inline bool RawMessageMetadata::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool RawMessageMetadata::has_id() const {
  return _internal_has_id();
}
inline void RawMessageMetadata::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::MessageID& RawMessageMetadata::_internal_id() const {
  const ::MessageID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageID*>(
      &::_MessageID_default_instance_);
}
inline const ::MessageID& RawMessageMetadata::id() const {
  // @@protoc_insertion_point(field_get:RawMessageMetadata.id)
  return _internal_id();
}
inline ::MessageID* RawMessageMetadata::release_id() {
  // @@protoc_insertion_point(field_release:RawMessageMetadata.id)
  
  ::MessageID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::MessageID* RawMessageMetadata::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageID>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::MessageID* RawMessageMetadata::mutable_id() {
  // @@protoc_insertion_point(field_mutable:RawMessageMetadata.id)
  return _internal_mutable_id();
}
inline void RawMessageMetadata::set_allocated_id(::MessageID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RawMessageMetadata.id)
}

// .google.protobuf.Timestamp timestamp = 2;
inline bool RawMessageMetadata::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool RawMessageMetadata::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RawMessageMetadata::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RawMessageMetadata::timestamp() const {
  // @@protoc_insertion_point(field_get:RawMessageMetadata.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RawMessageMetadata::release_timestamp() {
  // @@protoc_insertion_point(field_release:RawMessageMetadata.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RawMessageMetadata::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RawMessageMetadata::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:RawMessageMetadata.timestamp)
  return _internal_mutable_timestamp();
}
inline void RawMessageMetadata::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:RawMessageMetadata.timestamp)
}

// map<string, string> properties = 3;
inline int RawMessageMetadata::_internal_properties_size() const {
  return properties_.size();
}
inline int RawMessageMetadata::properties_size() const {
  return _internal_properties_size();
}
inline void RawMessageMetadata::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RawMessageMetadata::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RawMessageMetadata::properties() const {
  // @@protoc_insertion_point(field_map:RawMessageMetadata.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RawMessageMetadata::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RawMessageMetadata::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:RawMessageMetadata.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// Value

// .NullValue null_value = 1;
inline bool Value::_internal_has_null_value() const {
  return kind_case() == kNullValue;
}
inline void Value::set_has_null_value() {
  _oneof_case_[0] = kNullValue;
}
inline void Value::clear_null_value() {
  if (_internal_has_null_value()) {
    kind_.null_value_ = 0;
    clear_has_kind();
  }
}
inline ::NullValue Value::_internal_null_value() const {
  if (_internal_has_null_value()) {
    return static_cast< ::NullValue >(kind_.null_value_);
  }
  return static_cast< ::NullValue >(0);
}
inline ::NullValue Value::null_value() const {
  // @@protoc_insertion_point(field_get:Value.null_value)
  return _internal_null_value();
}
inline void Value::_internal_set_null_value(::NullValue value) {
  if (!_internal_has_null_value()) {
    clear_kind();
    set_has_null_value();
  }
  kind_.null_value_ = value;
}
inline void Value::set_null_value(::NullValue value) {
  // @@protoc_insertion_point(field_set:Value.null_value)
  _internal_set_null_value(value);
}

// string simple_value = 2;
inline bool Value::_internal_has_simple_value() const {
  return kind_case() == kSimpleValue;
}
inline void Value::set_has_simple_value() {
  _oneof_case_[0] = kSimpleValue;
}
inline void Value::clear_simple_value() {
  if (_internal_has_simple_value()) {
    kind_.simple_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_kind();
  }
}
inline const std::string& Value::simple_value() const {
  // @@protoc_insertion_point(field_get:Value.simple_value)
  return _internal_simple_value();
}
inline void Value::set_simple_value(const std::string& value) {
  _internal_set_simple_value(value);
  // @@protoc_insertion_point(field_set:Value.simple_value)
}
inline std::string* Value::mutable_simple_value() {
  // @@protoc_insertion_point(field_mutable:Value.simple_value)
  return _internal_mutable_simple_value();
}
inline const std::string& Value::_internal_simple_value() const {
  if (_internal_has_simple_value()) {
    return kind_.simple_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_simple_value(const std::string& value) {
  if (!_internal_has_simple_value()) {
    clear_kind();
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Value::set_simple_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:Value.simple_value)
  if (!_internal_has_simple_value()) {
    clear_kind();
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Value.simple_value)
}
inline void Value::set_simple_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_simple_value()) {
    clear_kind();
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Value.simple_value)
}
inline void Value::set_simple_value(const char* value, size_t size) {
  if (!_internal_has_simple_value()) {
    clear_kind();
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Value.simple_value)
}
inline std::string* Value::_internal_mutable_simple_value() {
  if (!_internal_has_simple_value()) {
    clear_kind();
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.simple_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Value::release_simple_value() {
  // @@protoc_insertion_point(field_release:Value.simple_value)
  if (_internal_has_simple_value()) {
    clear_has_kind();
    return kind_.simple_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_simple_value(std::string* simple_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (simple_value != nullptr) {
    set_has_simple_value();
    kind_.simple_value_.UnsafeSetDefault(simple_value);
  }
  // @@protoc_insertion_point(field_set_allocated:Value.simple_value)
}

// .Message message_value = 3;
inline bool Value::_internal_has_message_value() const {
  return kind_case() == kMessageValue;
}
inline bool Value::has_message_value() const {
  return _internal_has_message_value();
}
inline void Value::set_has_message_value() {
  _oneof_case_[0] = kMessageValue;
}
inline void Value::clear_message_value() {
  if (_internal_has_message_value()) {
    delete kind_.message_value_;
    clear_has_kind();
  }
}
inline ::Message* Value::release_message_value() {
  // @@protoc_insertion_point(field_release:Value.message_value)
  if (_internal_has_message_value()) {
    clear_has_kind();
      ::Message* temp = kind_.message_value_;
    kind_.message_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Message& Value::_internal_message_value() const {
  return _internal_has_message_value()
      ? *kind_.message_value_
      : *reinterpret_cast< ::Message*>(&::_Message_default_instance_);
}
inline const ::Message& Value::message_value() const {
  // @@protoc_insertion_point(field_get:Value.message_value)
  return _internal_message_value();
}
inline ::Message* Value::_internal_mutable_message_value() {
  if (!_internal_has_message_value()) {
    clear_kind();
    set_has_message_value();
    kind_.message_value_ = CreateMaybeMessage< ::Message >(
        GetArenaNoVirtual());
  }
  return kind_.message_value_;
}
inline ::Message* Value::mutable_message_value() {
  // @@protoc_insertion_point(field_mutable:Value.message_value)
  return _internal_mutable_message_value();
}

// .ListValue list_value = 4;
inline bool Value::_internal_has_list_value() const {
  return kind_case() == kListValue;
}
inline bool Value::has_list_value() const {
  return _internal_has_list_value();
}
inline void Value::set_has_list_value() {
  _oneof_case_[0] = kListValue;
}
inline void Value::clear_list_value() {
  if (_internal_has_list_value()) {
    delete kind_.list_value_;
    clear_has_kind();
  }
}
inline ::ListValue* Value::release_list_value() {
  // @@protoc_insertion_point(field_release:Value.list_value)
  if (_internal_has_list_value()) {
    clear_has_kind();
      ::ListValue* temp = kind_.list_value_;
    kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ListValue& Value::_internal_list_value() const {
  return _internal_has_list_value()
      ? *kind_.list_value_
      : *reinterpret_cast< ::ListValue*>(&::_ListValue_default_instance_);
}
inline const ::ListValue& Value::list_value() const {
  // @@protoc_insertion_point(field_get:Value.list_value)
  return _internal_list_value();
}
inline ::ListValue* Value::_internal_mutable_list_value() {
  if (!_internal_has_list_value()) {
    clear_kind();
    set_has_list_value();
    kind_.list_value_ = CreateMaybeMessage< ::ListValue >(
        GetArenaNoVirtual());
  }
  return kind_.list_value_;
}
inline ::ListValue* Value::mutable_list_value() {
  // @@protoc_insertion_point(field_mutable:Value.list_value)
  return _internal_mutable_list_value();
}

inline bool Value::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Value::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Value::KindCase Value::kind_case() const {
  return Value::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListValue

// repeated .Value values = 1;
inline int ListValue::_internal_values_size() const {
  return values_.size();
}
inline int ListValue::values_size() const {
  return _internal_values_size();
}
inline void ListValue::clear_values() {
  values_.Clear();
}
inline ::Value* ListValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ListValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >*
ListValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ListValue.values)
  return &values_;
}
inline const ::Value& ListValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Value& ListValue::values(int index) const {
  // @@protoc_insertion_point(field_get:ListValue.values)
  return _internal_values(index);
}
inline ::Value* ListValue::_internal_add_values() {
  return values_.Add();
}
inline ::Value* ListValue::add_values() {
  // @@protoc_insertion_point(field_add:ListValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Value >&
ListValue::values() const {
  // @@protoc_insertion_point(field_list:ListValue.values)
  return values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Message

// .EventID parent_event_id = 3;
inline bool Message::_internal_has_parent_event_id() const {
  return this != internal_default_instance() && parent_event_id_ != nullptr;
}
inline bool Message::has_parent_event_id() const {
  return _internal_has_parent_event_id();
}
inline void Message::clear_parent_event_id() {
  if (GetArenaNoVirtual() == nullptr && parent_event_id_ != nullptr) {
    delete parent_event_id_;
  }
  parent_event_id_ = nullptr;
}
inline const ::EventID& Message::_internal_parent_event_id() const {
  const ::EventID* p = parent_event_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EventID*>(
      &::_EventID_default_instance_);
}
inline const ::EventID& Message::parent_event_id() const {
  // @@protoc_insertion_point(field_get:Message.parent_event_id)
  return _internal_parent_event_id();
}
inline ::EventID* Message::release_parent_event_id() {
  // @@protoc_insertion_point(field_release:Message.parent_event_id)
  
  ::EventID* temp = parent_event_id_;
  parent_event_id_ = nullptr;
  return temp;
}
inline ::EventID* Message::_internal_mutable_parent_event_id() {
  
  if (parent_event_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::EventID>(GetArenaNoVirtual());
    parent_event_id_ = p;
  }
  return parent_event_id_;
}
inline ::EventID* Message::mutable_parent_event_id() {
  // @@protoc_insertion_point(field_mutable:Message.parent_event_id)
  return _internal_mutable_parent_event_id();
}
inline void Message::set_allocated_parent_event_id(::EventID* parent_event_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_event_id_;
  }
  if (parent_event_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_event_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_event_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_event_id_ = parent_event_id;
  // @@protoc_insertion_point(field_set_allocated:Message.parent_event_id)
}

// .MessageMetadata metadata = 1;
inline bool Message::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Message::has_metadata() const {
  return _internal_has_metadata();
}
inline void Message::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::MessageMetadata& Message::_internal_metadata() const {
  const ::MessageMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MessageMetadata*>(
      &::_MessageMetadata_default_instance_);
}
inline const ::MessageMetadata& Message::metadata() const {
  // @@protoc_insertion_point(field_get:Message.metadata)
  return _internal_metadata();
}
inline ::MessageMetadata* Message::release_metadata() {
  // @@protoc_insertion_point(field_release:Message.metadata)
  
  ::MessageMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::MessageMetadata* Message::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::MessageMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::MessageMetadata* Message::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:Message.metadata)
  return _internal_mutable_metadata();
}
inline void Message::set_allocated_metadata(::MessageMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:Message.metadata)
}

// map<string, .Value> fields = 2;
inline int Message::_internal_fields_size() const {
  return fields_.size();
}
inline int Message::fields_size() const {
  return _internal_fields_size();
}
inline void Message::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >&
Message::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >&
Message::fields() const {
  // @@protoc_insertion_point(field_map:Message.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >*
Message::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Value >*
Message::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:Message.fields)
  return _internal_mutable_fields();
}

// -------------------------------------------------------------------

// RawMessage

// .RawMessageMetadata metadata = 1;
inline bool RawMessage::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool RawMessage::has_metadata() const {
  return _internal_has_metadata();
}
inline void RawMessage::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::RawMessageMetadata& RawMessage::_internal_metadata() const {
  const ::RawMessageMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RawMessageMetadata*>(
      &::_RawMessageMetadata_default_instance_);
}
inline const ::RawMessageMetadata& RawMessage::metadata() const {
  // @@protoc_insertion_point(field_get:RawMessage.metadata)
  return _internal_metadata();
}
inline ::RawMessageMetadata* RawMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:RawMessage.metadata)
  
  ::RawMessageMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::RawMessageMetadata* RawMessage::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::RawMessageMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  return metadata_;
}
inline ::RawMessageMetadata* RawMessage::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:RawMessage.metadata)
  return _internal_mutable_metadata();
}
inline void RawMessage::set_allocated_metadata(::RawMessageMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:RawMessage.metadata)
}

// bytes body = 2;
inline void RawMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RawMessage::body() const {
  // @@protoc_insertion_point(field_get:RawMessage.body)
  return _internal_body();
}
inline void RawMessage::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:RawMessage.body)
}
inline std::string* RawMessage::mutable_body() {
  // @@protoc_insertion_point(field_mutable:RawMessage.body)
  return _internal_mutable_body();
}
inline const std::string& RawMessage::_internal_body() const {
  return body_.GetNoArena();
}
inline void RawMessage::_internal_set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RawMessage::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RawMessage.body)
}
inline void RawMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RawMessage.body)
}
inline void RawMessage::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RawMessage.body)
}
inline std::string* RawMessage::_internal_mutable_body() {
  
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RawMessage::release_body() {
  // @@protoc_insertion_point(field_release:RawMessage.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RawMessage::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:RawMessage.body)
}

// -------------------------------------------------------------------

// MessageBatch

// repeated .Message messages = 1;
inline int MessageBatch::_internal_messages_size() const {
  return messages_.size();
}
inline int MessageBatch::messages_size() const {
  return _internal_messages_size();
}
inline void MessageBatch::clear_messages() {
  messages_.Clear();
}
inline ::Message* MessageBatch::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:MessageBatch.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >*
MessageBatch::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:MessageBatch.messages)
  return &messages_;
}
inline const ::Message& MessageBatch::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::Message& MessageBatch::messages(int index) const {
  // @@protoc_insertion_point(field_get:MessageBatch.messages)
  return _internal_messages(index);
}
inline ::Message* MessageBatch::_internal_add_messages() {
  return messages_.Add();
}
inline ::Message* MessageBatch::add_messages() {
  // @@protoc_insertion_point(field_add:MessageBatch.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Message >&
MessageBatch::messages() const {
  // @@protoc_insertion_point(field_list:MessageBatch.messages)
  return messages_;
}

// -------------------------------------------------------------------

// RawMessageBatch

// repeated .RawMessage messages = 1;
inline int RawMessageBatch::_internal_messages_size() const {
  return messages_.size();
}
inline int RawMessageBatch::messages_size() const {
  return _internal_messages_size();
}
inline void RawMessageBatch::clear_messages() {
  messages_.Clear();
}
inline ::RawMessage* RawMessageBatch::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:RawMessageBatch.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawMessage >*
RawMessageBatch::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:RawMessageBatch.messages)
  return &messages_;
}
inline const ::RawMessage& RawMessageBatch::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::RawMessage& RawMessageBatch::messages(int index) const {
  // @@protoc_insertion_point(field_get:RawMessageBatch.messages)
  return _internal_messages(index);
}
inline ::RawMessage* RawMessageBatch::_internal_add_messages() {
  return messages_.Add();
}
inline ::RawMessage* RawMessageBatch::add_messages() {
  // @@protoc_insertion_point(field_add:RawMessageBatch.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RawMessage >&
RawMessageBatch::messages() const {
  // @@protoc_insertion_point(field_list:RawMessageBatch.messages)
  return messages_;
}

// -------------------------------------------------------------------

// RequestStatus

// .RequestStatus.Status status = 1;
inline void RequestStatus::clear_status() {
  status_ = 0;
}
inline ::RequestStatus_Status RequestStatus::_internal_status() const {
  return static_cast< ::RequestStatus_Status >(status_);
}
inline ::RequestStatus_Status RequestStatus::status() const {
  // @@protoc_insertion_point(field_get:RequestStatus.status)
  return _internal_status();
}
inline void RequestStatus::_internal_set_status(::RequestStatus_Status value) {
  
  status_ = value;
}
inline void RequestStatus::set_status(::RequestStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RequestStatus.status)
}

// string message = 2;
inline void RequestStatus::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestStatus::message() const {
  // @@protoc_insertion_point(field_get:RequestStatus.message)
  return _internal_message();
}
inline void RequestStatus::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:RequestStatus.message)
}
inline std::string* RequestStatus::mutable_message() {
  // @@protoc_insertion_point(field_mutable:RequestStatus.message)
  return _internal_mutable_message();
}
inline const std::string& RequestStatus::_internal_message() const {
  return message_.GetNoArena();
}
inline void RequestStatus::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestStatus::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestStatus.message)
}
inline void RequestStatus::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestStatus.message)
}
inline void RequestStatus::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestStatus.message)
}
inline std::string* RequestStatus::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestStatus::release_message() {
  // @@protoc_insertion_point(field_release:RequestStatus.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:RequestStatus.message)
}

// -------------------------------------------------------------------

// ComparisonSettings

// repeated string ignore_fields = 1;
inline int ComparisonSettings::_internal_ignore_fields_size() const {
  return ignore_fields_.size();
}
inline int ComparisonSettings::ignore_fields_size() const {
  return _internal_ignore_fields_size();
}
inline void ComparisonSettings::clear_ignore_fields() {
  ignore_fields_.Clear();
}
inline std::string* ComparisonSettings::add_ignore_fields() {
  // @@protoc_insertion_point(field_add_mutable:ComparisonSettings.ignore_fields)
  return _internal_add_ignore_fields();
}
inline const std::string& ComparisonSettings::_internal_ignore_fields(int index) const {
  return ignore_fields_.Get(index);
}
inline const std::string& ComparisonSettings::ignore_fields(int index) const {
  // @@protoc_insertion_point(field_get:ComparisonSettings.ignore_fields)
  return _internal_ignore_fields(index);
}
inline std::string* ComparisonSettings::mutable_ignore_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ComparisonSettings.ignore_fields)
  return ignore_fields_.Mutable(index);
}
inline void ComparisonSettings::set_ignore_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ComparisonSettings.ignore_fields)
  ignore_fields_.Mutable(index)->assign(value);
}
inline void ComparisonSettings::set_ignore_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ComparisonSettings.ignore_fields)
  ignore_fields_.Mutable(index)->assign(std::move(value));
}
inline void ComparisonSettings::set_ignore_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ComparisonSettings.ignore_fields)
}
inline void ComparisonSettings::set_ignore_fields(int index, const char* value, size_t size) {
  ignore_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ComparisonSettings.ignore_fields)
}
inline std::string* ComparisonSettings::_internal_add_ignore_fields() {
  return ignore_fields_.Add();
}
inline void ComparisonSettings::add_ignore_fields(const std::string& value) {
  ignore_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ComparisonSettings.ignore_fields)
}
inline void ComparisonSettings::add_ignore_fields(std::string&& value) {
  ignore_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ComparisonSettings.ignore_fields)
}
inline void ComparisonSettings::add_ignore_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignore_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ComparisonSettings.ignore_fields)
}
inline void ComparisonSettings::add_ignore_fields(const char* value, size_t size) {
  ignore_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ComparisonSettings.ignore_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComparisonSettings::ignore_fields() const {
  // @@protoc_insertion_point(field_list:ComparisonSettings.ignore_fields)
  return ignore_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComparisonSettings::mutable_ignore_fields() {
  // @@protoc_insertion_point(field_mutable_list:ComparisonSettings.ignore_fields)
  return &ignore_fields_;
}

// .FailUnexpected fail_unexpected = 2;
inline void ComparisonSettings::clear_fail_unexpected() {
  fail_unexpected_ = 0;
}
inline ::FailUnexpected ComparisonSettings::_internal_fail_unexpected() const {
  return static_cast< ::FailUnexpected >(fail_unexpected_);
}
inline ::FailUnexpected ComparisonSettings::fail_unexpected() const {
  // @@protoc_insertion_point(field_get:ComparisonSettings.fail_unexpected)
  return _internal_fail_unexpected();
}
inline void ComparisonSettings::_internal_set_fail_unexpected(::FailUnexpected value) {
  
  fail_unexpected_ = value;
}
inline void ComparisonSettings::set_fail_unexpected(::FailUnexpected value) {
  _internal_set_fail_unexpected(value);
  // @@protoc_insertion_point(field_set:ComparisonSettings.fail_unexpected)
}

// -------------------------------------------------------------------

// ValueFilter

// .FilterOperation operation = 1;
inline void ValueFilter::clear_operation() {
  operation_ = 0;
}
inline ::FilterOperation ValueFilter::_internal_operation() const {
  return static_cast< ::FilterOperation >(operation_);
}
inline ::FilterOperation ValueFilter::operation() const {
  // @@protoc_insertion_point(field_get:ValueFilter.operation)
  return _internal_operation();
}
inline void ValueFilter::_internal_set_operation(::FilterOperation value) {
  
  operation_ = value;
}
inline void ValueFilter::set_operation(::FilterOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:ValueFilter.operation)
}

// bool key = 2;
inline void ValueFilter::clear_key() {
  key_ = false;
}
inline bool ValueFilter::_internal_key() const {
  return key_;
}
inline bool ValueFilter::key() const {
  // @@protoc_insertion_point(field_get:ValueFilter.key)
  return _internal_key();
}
inline void ValueFilter::_internal_set_key(bool value) {
  
  key_ = value;
}
inline void ValueFilter::set_key(bool value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ValueFilter.key)
}

// string simple_filter = 3;
inline bool ValueFilter::_internal_has_simple_filter() const {
  return kind_case() == kSimpleFilter;
}
inline void ValueFilter::set_has_simple_filter() {
  _oneof_case_[0] = kSimpleFilter;
}
inline void ValueFilter::clear_simple_filter() {
  if (_internal_has_simple_filter()) {
    kind_.simple_filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_kind();
  }
}
inline const std::string& ValueFilter::simple_filter() const {
  // @@protoc_insertion_point(field_get:ValueFilter.simple_filter)
  return _internal_simple_filter();
}
inline void ValueFilter::set_simple_filter(const std::string& value) {
  _internal_set_simple_filter(value);
  // @@protoc_insertion_point(field_set:ValueFilter.simple_filter)
}
inline std::string* ValueFilter::mutable_simple_filter() {
  // @@protoc_insertion_point(field_mutable:ValueFilter.simple_filter)
  return _internal_mutable_simple_filter();
}
inline const std::string& ValueFilter::_internal_simple_filter() const {
  if (_internal_has_simple_filter()) {
    return kind_.simple_filter_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ValueFilter::_internal_set_simple_filter(const std::string& value) {
  if (!_internal_has_simple_filter()) {
    clear_kind();
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ValueFilter::set_simple_filter(std::string&& value) {
  // @@protoc_insertion_point(field_set:ValueFilter.simple_filter)
  if (!_internal_has_simple_filter()) {
    clear_kind();
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ValueFilter.simple_filter)
}
inline void ValueFilter::set_simple_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_simple_filter()) {
    clear_kind();
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ValueFilter.simple_filter)
}
inline void ValueFilter::set_simple_filter(const char* value, size_t size) {
  if (!_internal_has_simple_filter()) {
    clear_kind();
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.simple_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ValueFilter.simple_filter)
}
inline std::string* ValueFilter::_internal_mutable_simple_filter() {
  if (!_internal_has_simple_filter()) {
    clear_kind();
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.simple_filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ValueFilter::release_simple_filter() {
  // @@protoc_insertion_point(field_release:ValueFilter.simple_filter)
  if (_internal_has_simple_filter()) {
    clear_has_kind();
    return kind_.simple_filter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ValueFilter::set_allocated_simple_filter(std::string* simple_filter) {
  if (has_kind()) {
    clear_kind();
  }
  if (simple_filter != nullptr) {
    set_has_simple_filter();
    kind_.simple_filter_.UnsafeSetDefault(simple_filter);
  }
  // @@protoc_insertion_point(field_set_allocated:ValueFilter.simple_filter)
}

// .MessageFilter message_filter = 4;
inline bool ValueFilter::_internal_has_message_filter() const {
  return kind_case() == kMessageFilter;
}
inline bool ValueFilter::has_message_filter() const {
  return _internal_has_message_filter();
}
inline void ValueFilter::set_has_message_filter() {
  _oneof_case_[0] = kMessageFilter;
}
inline void ValueFilter::clear_message_filter() {
  if (_internal_has_message_filter()) {
    delete kind_.message_filter_;
    clear_has_kind();
  }
}
inline ::MessageFilter* ValueFilter::release_message_filter() {
  // @@protoc_insertion_point(field_release:ValueFilter.message_filter)
  if (_internal_has_message_filter()) {
    clear_has_kind();
      ::MessageFilter* temp = kind_.message_filter_;
    kind_.message_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::MessageFilter& ValueFilter::_internal_message_filter() const {
  return _internal_has_message_filter()
      ? *kind_.message_filter_
      : *reinterpret_cast< ::MessageFilter*>(&::_MessageFilter_default_instance_);
}
inline const ::MessageFilter& ValueFilter::message_filter() const {
  // @@protoc_insertion_point(field_get:ValueFilter.message_filter)
  return _internal_message_filter();
}
inline ::MessageFilter* ValueFilter::_internal_mutable_message_filter() {
  if (!_internal_has_message_filter()) {
    clear_kind();
    set_has_message_filter();
    kind_.message_filter_ = CreateMaybeMessage< ::MessageFilter >(
        GetArenaNoVirtual());
  }
  return kind_.message_filter_;
}
inline ::MessageFilter* ValueFilter::mutable_message_filter() {
  // @@protoc_insertion_point(field_mutable:ValueFilter.message_filter)
  return _internal_mutable_message_filter();
}

// .ListValueFilter list_filter = 5;
inline bool ValueFilter::_internal_has_list_filter() const {
  return kind_case() == kListFilter;
}
inline bool ValueFilter::has_list_filter() const {
  return _internal_has_list_filter();
}
inline void ValueFilter::set_has_list_filter() {
  _oneof_case_[0] = kListFilter;
}
inline void ValueFilter::clear_list_filter() {
  if (_internal_has_list_filter()) {
    delete kind_.list_filter_;
    clear_has_kind();
  }
}
inline ::ListValueFilter* ValueFilter::release_list_filter() {
  // @@protoc_insertion_point(field_release:ValueFilter.list_filter)
  if (_internal_has_list_filter()) {
    clear_has_kind();
      ::ListValueFilter* temp = kind_.list_filter_;
    kind_.list_filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ListValueFilter& ValueFilter::_internal_list_filter() const {
  return _internal_has_list_filter()
      ? *kind_.list_filter_
      : *reinterpret_cast< ::ListValueFilter*>(&::_ListValueFilter_default_instance_);
}
inline const ::ListValueFilter& ValueFilter::list_filter() const {
  // @@protoc_insertion_point(field_get:ValueFilter.list_filter)
  return _internal_list_filter();
}
inline ::ListValueFilter* ValueFilter::_internal_mutable_list_filter() {
  if (!_internal_has_list_filter()) {
    clear_kind();
    set_has_list_filter();
    kind_.list_filter_ = CreateMaybeMessage< ::ListValueFilter >(
        GetArenaNoVirtual());
  }
  return kind_.list_filter_;
}
inline ::ListValueFilter* ValueFilter::mutable_list_filter() {
  // @@protoc_insertion_point(field_mutable:ValueFilter.list_filter)
  return _internal_mutable_list_filter();
}

inline bool ValueFilter::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void ValueFilter::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline ValueFilter::KindCase ValueFilter::kind_case() const {
  return ValueFilter::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListValueFilter

// repeated .ValueFilter values = 1;
inline int ListValueFilter::_internal_values_size() const {
  return values_.size();
}
inline int ListValueFilter::values_size() const {
  return _internal_values_size();
}
inline void ListValueFilter::clear_values() {
  values_.Clear();
}
inline ::ValueFilter* ListValueFilter::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:ListValueFilter.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueFilter >*
ListValueFilter::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:ListValueFilter.values)
  return &values_;
}
inline const ::ValueFilter& ListValueFilter::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::ValueFilter& ListValueFilter::values(int index) const {
  // @@protoc_insertion_point(field_get:ListValueFilter.values)
  return _internal_values(index);
}
inline ::ValueFilter* ListValueFilter::_internal_add_values() {
  return values_.Add();
}
inline ::ValueFilter* ListValueFilter::add_values() {
  // @@protoc_insertion_point(field_add:ListValueFilter.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ValueFilter >&
ListValueFilter::values() const {
  // @@protoc_insertion_point(field_list:ListValueFilter.values)
  return values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MessageFilter

// string messageType = 1;
inline void MessageFilter::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageFilter::messagetype() const {
  // @@protoc_insertion_point(field_get:MessageFilter.messageType)
  return _internal_messagetype();
}
inline void MessageFilter::set_messagetype(const std::string& value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:MessageFilter.messageType)
}
inline std::string* MessageFilter::mutable_messagetype() {
  // @@protoc_insertion_point(field_mutable:MessageFilter.messageType)
  return _internal_mutable_messagetype();
}
inline const std::string& MessageFilter::_internal_messagetype() const {
  return messagetype_.GetNoArena();
}
inline void MessageFilter::_internal_set_messagetype(const std::string& value) {
  
  messagetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageFilter::set_messagetype(std::string&& value) {
  
  messagetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageFilter.messageType)
}
inline void MessageFilter::set_messagetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  messagetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageFilter.messageType)
}
inline void MessageFilter::set_messagetype(const char* value, size_t size) {
  
  messagetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageFilter.messageType)
}
inline std::string* MessageFilter::_internal_mutable_messagetype() {
  
  return messagetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageFilter::release_messagetype() {
  // @@protoc_insertion_point(field_release:MessageFilter.messageType)
  
  return messagetype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageFilter::set_allocated_messagetype(std::string* messagetype) {
  if (messagetype != nullptr) {
    
  } else {
    
  }
  messagetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:MessageFilter.messageType)
}

// string direction = 2;
inline void MessageFilter::clear_direction() {
  direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageFilter::direction() const {
  // @@protoc_insertion_point(field_get:MessageFilter.direction)
  return _internal_direction();
}
inline void MessageFilter::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:MessageFilter.direction)
}
inline std::string* MessageFilter::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:MessageFilter.direction)
  return _internal_mutable_direction();
}
inline const std::string& MessageFilter::_internal_direction() const {
  return direction_.GetNoArena();
}
inline void MessageFilter::_internal_set_direction(const std::string& value) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageFilter::set_direction(std::string&& value) {
  
  direction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageFilter.direction)
}
inline void MessageFilter::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageFilter.direction)
}
inline void MessageFilter::set_direction(const char* value, size_t size) {
  
  direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageFilter.direction)
}
inline std::string* MessageFilter::_internal_mutable_direction() {
  
  return direction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageFilter::release_direction() {
  // @@protoc_insertion_point(field_release:MessageFilter.direction)
  
  return direction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageFilter::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction);
  // @@protoc_insertion_point(field_set_allocated:MessageFilter.direction)
}

// map<string, .ValueFilter> fields = 3;
inline int MessageFilter::_internal_fields_size() const {
  return fields_.size();
}
inline int MessageFilter::fields_size() const {
  return _internal_fields_size();
}
inline void MessageFilter::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >&
MessageFilter::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >&
MessageFilter::fields() const {
  // @@protoc_insertion_point(field_map:MessageFilter.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >*
MessageFilter::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::ValueFilter >*
MessageFilter::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:MessageFilter.fields)
  return _internal_mutable_fields();
}

// .ComparisonSettings comparison_settings = 4;
inline bool MessageFilter::_internal_has_comparison_settings() const {
  return this != internal_default_instance() && comparison_settings_ != nullptr;
}
inline bool MessageFilter::has_comparison_settings() const {
  return _internal_has_comparison_settings();
}
inline void MessageFilter::clear_comparison_settings() {
  if (GetArenaNoVirtual() == nullptr && comparison_settings_ != nullptr) {
    delete comparison_settings_;
  }
  comparison_settings_ = nullptr;
}
inline const ::ComparisonSettings& MessageFilter::_internal_comparison_settings() const {
  const ::ComparisonSettings* p = comparison_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ComparisonSettings*>(
      &::_ComparisonSettings_default_instance_);
}
inline const ::ComparisonSettings& MessageFilter::comparison_settings() const {
  // @@protoc_insertion_point(field_get:MessageFilter.comparison_settings)
  return _internal_comparison_settings();
}
inline ::ComparisonSettings* MessageFilter::release_comparison_settings() {
  // @@protoc_insertion_point(field_release:MessageFilter.comparison_settings)
  
  ::ComparisonSettings* temp = comparison_settings_;
  comparison_settings_ = nullptr;
  return temp;
}
inline ::ComparisonSettings* MessageFilter::_internal_mutable_comparison_settings() {
  
  if (comparison_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::ComparisonSettings>(GetArenaNoVirtual());
    comparison_settings_ = p;
  }
  return comparison_settings_;
}
inline ::ComparisonSettings* MessageFilter::mutable_comparison_settings() {
  // @@protoc_insertion_point(field_mutable:MessageFilter.comparison_settings)
  return _internal_mutable_comparison_settings();
}
inline void MessageFilter::set_allocated_comparison_settings(::ComparisonSettings* comparison_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete comparison_settings_;
  }
  if (comparison_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      comparison_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, comparison_settings, submessage_arena);
    }
    
  } else {
    
  }
  comparison_settings_ = comparison_settings;
  // @@protoc_insertion_point(field_set_allocated:MessageFilter.comparison_settings)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Checkpoint_DirectionCheckpoint

// map<int32, int64> direction_to_sequence = 1;
inline int Checkpoint_DirectionCheckpoint::_internal_direction_to_sequence_size() const {
  return direction_to_sequence_.size();
}
inline int Checkpoint_DirectionCheckpoint::direction_to_sequence_size() const {
  return _internal_direction_to_sequence_size();
}
inline void Checkpoint_DirectionCheckpoint::clear_direction_to_sequence() {
  direction_to_sequence_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
Checkpoint_DirectionCheckpoint::_internal_direction_to_sequence() const {
  return direction_to_sequence_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
Checkpoint_DirectionCheckpoint::direction_to_sequence() const {
  // @@protoc_insertion_point(field_map:Checkpoint.DirectionCheckpoint.direction_to_sequence)
  return _internal_direction_to_sequence();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
Checkpoint_DirectionCheckpoint::_internal_mutable_direction_to_sequence() {
  return direction_to_sequence_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
Checkpoint_DirectionCheckpoint::mutable_direction_to_sequence() {
  // @@protoc_insertion_point(field_mutable_map:Checkpoint.DirectionCheckpoint.direction_to_sequence)
  return _internal_mutable_direction_to_sequence();
}

// -------------------------------------------------------------------

// Checkpoint

// string id = 1;
inline void Checkpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Checkpoint::id() const {
  // @@protoc_insertion_point(field_get:Checkpoint.id)
  return _internal_id();
}
inline void Checkpoint::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Checkpoint.id)
}
inline std::string* Checkpoint::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Checkpoint.id)
  return _internal_mutable_id();
}
inline const std::string& Checkpoint::_internal_id() const {
  return id_.GetNoArena();
}
inline void Checkpoint::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Checkpoint::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Checkpoint.id)
}
inline void Checkpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Checkpoint.id)
}
inline void Checkpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Checkpoint.id)
}
inline std::string* Checkpoint::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Checkpoint::release_id() {
  // @@protoc_insertion_point(field_release:Checkpoint.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Checkpoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Checkpoint.id)
}

// map<string, .Checkpoint.DirectionCheckpoint> session_alias_to_direction_checkpoint = 2;
inline int Checkpoint::_internal_session_alias_to_direction_checkpoint_size() const {
  return session_alias_to_direction_checkpoint_.size();
}
inline int Checkpoint::session_alias_to_direction_checkpoint_size() const {
  return _internal_session_alias_to_direction_checkpoint_size();
}
inline void Checkpoint::clear_session_alias_to_direction_checkpoint() {
  session_alias_to_direction_checkpoint_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >&
Checkpoint::_internal_session_alias_to_direction_checkpoint() const {
  return session_alias_to_direction_checkpoint_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >&
Checkpoint::session_alias_to_direction_checkpoint() const {
  // @@protoc_insertion_point(field_map:Checkpoint.session_alias_to_direction_checkpoint)
  return _internal_session_alias_to_direction_checkpoint();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >*
Checkpoint::_internal_mutable_session_alias_to_direction_checkpoint() {
  return session_alias_to_direction_checkpoint_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Checkpoint_DirectionCheckpoint >*
Checkpoint::mutable_session_alias_to_direction_checkpoint() {
  // @@protoc_insertion_point(field_mutable_map:Checkpoint.session_alias_to_direction_checkpoint)
  return _internal_mutable_session_alias_to_direction_checkpoint();
}

// -------------------------------------------------------------------

// EventID

// string id = 1;
inline void EventID::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventID::id() const {
  // @@protoc_insertion_point(field_get:EventID.id)
  return _internal_id();
}
inline void EventID::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:EventID.id)
}
inline std::string* EventID::mutable_id() {
  // @@protoc_insertion_point(field_mutable:EventID.id)
  return _internal_mutable_id();
}
inline const std::string& EventID::_internal_id() const {
  return id_.GetNoArena();
}
inline void EventID::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EventID::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EventID.id)
}
inline void EventID::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EventID.id)
}
inline void EventID::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EventID.id)
}
inline std::string* EventID::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventID::release_id() {
  // @@protoc_insertion_point(field_release:EventID.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventID::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:EventID.id)
}

// -------------------------------------------------------------------

// Event

// .EventID id = 1;
inline bool Event::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Event::has_id() const {
  return _internal_has_id();
}
inline void Event::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::EventID& Event::_internal_id() const {
  const ::EventID* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EventID*>(
      &::_EventID_default_instance_);
}
inline const ::EventID& Event::id() const {
  // @@protoc_insertion_point(field_get:Event.id)
  return _internal_id();
}
inline ::EventID* Event::release_id() {
  // @@protoc_insertion_point(field_release:Event.id)
  
  ::EventID* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::EventID* Event::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::EventID>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::EventID* Event::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Event.id)
  return _internal_mutable_id();
}
inline void Event::set_allocated_id(::EventID* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Event.id)
}

// .EventID parent_id = 2;
inline bool Event::_internal_has_parent_id() const {
  return this != internal_default_instance() && parent_id_ != nullptr;
}
inline bool Event::has_parent_id() const {
  return _internal_has_parent_id();
}
inline void Event::clear_parent_id() {
  if (GetArenaNoVirtual() == nullptr && parent_id_ != nullptr) {
    delete parent_id_;
  }
  parent_id_ = nullptr;
}
inline const ::EventID& Event::_internal_parent_id() const {
  const ::EventID* p = parent_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EventID*>(
      &::_EventID_default_instance_);
}
inline const ::EventID& Event::parent_id() const {
  // @@protoc_insertion_point(field_get:Event.parent_id)
  return _internal_parent_id();
}
inline ::EventID* Event::release_parent_id() {
  // @@protoc_insertion_point(field_release:Event.parent_id)
  
  ::EventID* temp = parent_id_;
  parent_id_ = nullptr;
  return temp;
}
inline ::EventID* Event::_internal_mutable_parent_id() {
  
  if (parent_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::EventID>(GetArenaNoVirtual());
    parent_id_ = p;
  }
  return parent_id_;
}
inline ::EventID* Event::mutable_parent_id() {
  // @@protoc_insertion_point(field_mutable:Event.parent_id)
  return _internal_mutable_parent_id();
}
inline void Event::set_allocated_parent_id(::EventID* parent_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_id_;
  }
  if (parent_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_id_ = parent_id;
  // @@protoc_insertion_point(field_set_allocated:Event.parent_id)
}

// .google.protobuf.Timestamp start_timestamp = 3;
inline bool Event::_internal_has_start_timestamp() const {
  return this != internal_default_instance() && start_timestamp_ != nullptr;
}
inline bool Event::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_start_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::start_timestamp() const {
  // @@protoc_insertion_point(field_get:Event.start_timestamp)
  return _internal_start_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_start_timestamp() {
  // @@protoc_insertion_point(field_release:Event.start_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_timestamp_;
  start_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_start_timestamp() {
  
  if (start_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_timestamp_ = p;
  }
  return start_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_start_timestamp() {
  // @@protoc_insertion_point(field_mutable:Event.start_timestamp)
  return _internal_mutable_start_timestamp();
}
inline void Event::set_allocated_start_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* start_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp_);
  }
  if (start_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      start_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  start_timestamp_ = start_timestamp;
  // @@protoc_insertion_point(field_set_allocated:Event.start_timestamp)
}

// .google.protobuf.Timestamp end_timestamp = 4;
inline bool Event::_internal_has_end_timestamp() const {
  return this != internal_default_instance() && end_timestamp_ != nullptr;
}
inline bool Event::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_end_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Event::end_timestamp() const {
  // @@protoc_insertion_point(field_get:Event.end_timestamp)
  return _internal_end_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_end_timestamp() {
  // @@protoc_insertion_point(field_release:Event.end_timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_timestamp_;
  end_timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_end_timestamp() {
  
  if (end_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_timestamp_ = p;
  }
  return end_timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_end_timestamp() {
  // @@protoc_insertion_point(field_mutable:Event.end_timestamp)
  return _internal_mutable_end_timestamp();
}
inline void Event::set_allocated_end_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* end_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_timestamp_);
  }
  if (end_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      end_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  end_timestamp_ = end_timestamp;
  // @@protoc_insertion_point(field_set_allocated:Event.end_timestamp)
}

// .EventStatus status = 5;
inline void Event::clear_status() {
  status_ = 0;
}
inline ::EventStatus Event::_internal_status() const {
  return static_cast< ::EventStatus >(status_);
}
inline ::EventStatus Event::status() const {
  // @@protoc_insertion_point(field_get:Event.status)
  return _internal_status();
}
inline void Event::_internal_set_status(::EventStatus value) {
  
  status_ = value;
}
inline void Event::set_status(::EventStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Event.status)
}

// string name = 6;
inline void Event::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event::name() const {
  // @@protoc_insertion_point(field_get:Event.name)
  return _internal_name();
}
inline void Event::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Event.name)
}
inline std::string* Event::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Event.name)
  return _internal_mutable_name();
}
inline const std::string& Event::_internal_name() const {
  return name_.GetNoArena();
}
inline void Event::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Event::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.name)
}
inline void Event::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.name)
}
inline void Event::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.name)
}
inline std::string* Event::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_name() {
  // @@protoc_insertion_point(field_release:Event.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Event.name)
}

// string type = 7;
inline void Event::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event::type() const {
  // @@protoc_insertion_point(field_get:Event.type)
  return _internal_type();
}
inline void Event::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Event.type)
}
inline std::string* Event::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Event.type)
  return _internal_mutable_type();
}
inline const std::string& Event::_internal_type() const {
  return type_.GetNoArena();
}
inline void Event::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Event::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.type)
}
inline void Event::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.type)
}
inline void Event::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.type)
}
inline std::string* Event::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_type() {
  // @@protoc_insertion_point(field_release:Event.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Event.type)
}

// bytes body = 8;
inline void Event::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Event::body() const {
  // @@protoc_insertion_point(field_get:Event.body)
  return _internal_body();
}
inline void Event::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:Event.body)
}
inline std::string* Event::mutable_body() {
  // @@protoc_insertion_point(field_mutable:Event.body)
  return _internal_mutable_body();
}
inline const std::string& Event::_internal_body() const {
  return body_.GetNoArena();
}
inline void Event::_internal_set_body(const std::string& value) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Event::set_body(std::string&& value) {
  
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Event.body)
}
inline void Event::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Event.body)
}
inline void Event::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Event.body)
}
inline std::string* Event::_internal_mutable_body() {
  
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Event::release_body() {
  // @@protoc_insertion_point(field_release:Event.body)
  
  return body_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:Event.body)
}

// repeated .MessageID attached_message_ids = 9;
inline int Event::_internal_attached_message_ids_size() const {
  return attached_message_ids_.size();
}
inline int Event::attached_message_ids_size() const {
  return _internal_attached_message_ids_size();
}
inline void Event::clear_attached_message_ids() {
  attached_message_ids_.Clear();
}
inline ::MessageID* Event::mutable_attached_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Event.attached_message_ids)
  return attached_message_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageID >*
Event::mutable_attached_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:Event.attached_message_ids)
  return &attached_message_ids_;
}
inline const ::MessageID& Event::_internal_attached_message_ids(int index) const {
  return attached_message_ids_.Get(index);
}
inline const ::MessageID& Event::attached_message_ids(int index) const {
  // @@protoc_insertion_point(field_get:Event.attached_message_ids)
  return _internal_attached_message_ids(index);
}
inline ::MessageID* Event::_internal_add_attached_message_ids() {
  return attached_message_ids_.Add();
}
inline ::MessageID* Event::add_attached_message_ids() {
  // @@protoc_insertion_point(field_add:Event.attached_message_ids)
  return _internal_add_attached_message_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MessageID >&
Event::attached_message_ids() const {
  // @@protoc_insertion_point(field_list:Event.attached_message_ids)
  return attached_message_ids_;
}

// -------------------------------------------------------------------

// EventBatch

// .EventID parent_event_id = 1;
inline bool EventBatch::_internal_has_parent_event_id() const {
  return this != internal_default_instance() && parent_event_id_ != nullptr;
}
inline bool EventBatch::has_parent_event_id() const {
  return _internal_has_parent_event_id();
}
inline void EventBatch::clear_parent_event_id() {
  if (GetArenaNoVirtual() == nullptr && parent_event_id_ != nullptr) {
    delete parent_event_id_;
  }
  parent_event_id_ = nullptr;
}
inline const ::EventID& EventBatch::_internal_parent_event_id() const {
  const ::EventID* p = parent_event_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EventID*>(
      &::_EventID_default_instance_);
}
inline const ::EventID& EventBatch::parent_event_id() const {
  // @@protoc_insertion_point(field_get:EventBatch.parent_event_id)
  return _internal_parent_event_id();
}
inline ::EventID* EventBatch::release_parent_event_id() {
  // @@protoc_insertion_point(field_release:EventBatch.parent_event_id)
  
  ::EventID* temp = parent_event_id_;
  parent_event_id_ = nullptr;
  return temp;
}
inline ::EventID* EventBatch::_internal_mutable_parent_event_id() {
  
  if (parent_event_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::EventID>(GetArenaNoVirtual());
    parent_event_id_ = p;
  }
  return parent_event_id_;
}
inline ::EventID* EventBatch::mutable_parent_event_id() {
  // @@protoc_insertion_point(field_mutable:EventBatch.parent_event_id)
  return _internal_mutable_parent_event_id();
}
inline void EventBatch::set_allocated_parent_event_id(::EventID* parent_event_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_event_id_;
  }
  if (parent_event_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parent_event_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent_event_id, submessage_arena);
    }
    
  } else {
    
  }
  parent_event_id_ = parent_event_id;
  // @@protoc_insertion_point(field_set_allocated:EventBatch.parent_event_id)
}

// repeated .Event events = 2;
inline int EventBatch::_internal_events_size() const {
  return events_.size();
}
inline int EventBatch::events_size() const {
  return _internal_events_size();
}
inline void EventBatch::clear_events() {
  events_.Clear();
}
inline ::Event* EventBatch::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:EventBatch.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >*
EventBatch::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:EventBatch.events)
  return &events_;
}
inline const ::Event& EventBatch::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::Event& EventBatch::events(int index) const {
  // @@protoc_insertion_point(field_get:EventBatch.events)
  return _internal_events(index);
}
inline ::Event* EventBatch::_internal_add_events() {
  return events_.Add();
}
inline ::Event* EventBatch::add_events() {
  // @@protoc_insertion_point(field_add:EventBatch.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Event >&
EventBatch::events() const {
  // @@protoc_insertion_point(field_list:EventBatch.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RequestStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RequestStatus_Status>() {
  return ::RequestStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Direction>() {
  return ::Direction_descriptor();
}
template <> struct is_proto_enum< ::NullValue> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NullValue>() {
  return ::NullValue_descriptor();
}
template <> struct is_proto_enum< ::FailUnexpected> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FailUnexpected>() {
  return ::FailUnexpected_descriptor();
}
template <> struct is_proto_enum< ::FilterOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FilterOperation>() {
  return ::FilterOperation_descriptor();
}
template <> struct is_proto_enum< ::EventStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EventStatus>() {
  return ::EventStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
